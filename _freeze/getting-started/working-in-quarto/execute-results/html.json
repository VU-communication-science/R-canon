{
  "hash": "0392e90f10a55781e21d171ce01bc103",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Working in Quarto\norder: 10\n---\n\n\n\n\n# Integrating code and text\n\nThe classic way of working in R is to write your code in a script file.\nThis is still a very common way of working, and it has many advantages.\nBut today there are also great alternatives, that make it possible to integrate your code directly in your reporting.\n\nIn fact, the book that you are currently reading is written in one such alternatives, called **Quarto**.\nQuarto is a **literate programming** tool, which means that it allows you to write your code and your text in the same document.\nAny results and visualizations that you generate in your code can also be directly included in the output document.\nThis is not only convenient, but also makes your analysis more transparent and reproducible.\nIf you ever need to update your analysis, you can just rerun the code and the document will automatically update, including any tables, figures and statistial results that you generated.\n\nAnd despite all those features, it really isn't that different from writing an R script.\nIn some ways it is even a more convenient way of working.\n\nIn some courses in this program, you will be asked to write your assignments in Quarto.\nThis section therefore provides a brief introduction to working in Quarto.\n\n## Creating a Quarto file\n\nYou can create and work with Quarto directly in RStudio. \nFor assignments, you will often be given a template Quarto file, but here we'll create one from scratch.\nTo create a new Quarto file in RStudio, go to the menu bar and select `File > New File > Quarto document`.\n\nYou'll get a menu where you can select some options, such as whether you want the output to be created in HTML, PDF or Word. \nWe'll stick with the default HTML, because this doesn't require any additional software to be installed.\nFor now, the only thing you should change is the **Title**.\nJust name it something like *My First Quarto Document*, and click `Create`.\n\nThe new file will open in the editor, and you'll see that it already contains some text and code, that also doubles as a quick tutorial.\nRoughly speaking, there are three general components.\n\n### 1. The Header\n\nAt the top of the file there is a header, which is enclosed by three dashes `---`.\nHere you can specify some general settings for the document, such as the title, the author, and the output format.\nThe default is:\n\n```yaml\n---\ntitle: \"My First Quarto Document\"\nformat: html\neditor: visual\n---\n```\n\nThis means that the title of the document is \"My First Quarto Document\", the output format is HTML, and the editor is the visual editor.\n\n::: {.callout-note title=\"Visual or Source editor\" collapse=\"true\"}\n\nThe Quarto editor can be `source` or `visual`.\nIn `visual` mode, everything looks a bit more pretty. \nIt doesn't yet look as pretty as when you render the document (which we'll show you in a bit), but it's a bit easier to read.\nAlso, in the toolbar you get some buttons to make text bold or italics, add codeblocks, insert images, create tables, etc.\n\nIn `source` mode, everything is just in plain text.\nBehind the scenes, Quarto uses a format called **Markdown** to format the text.\nMarkdown is a type of markup language (like HTML).\nWhat this means is that any formatting that you do (e.g., bold, tables, lists) is done by writing the text in a specific way.\nFor example, to make a word bold, you write it between two asterisks `**like this**`.\n\nWorking in `source` mode can be convenient if you're already familiar with Markdown.\nIf not, we recommend sticking with `visual` mode for now, and maybe forever.\n:::\n\nYou can add many more options to the header, but for now we'll stick with the basics. \nThere is just one thing we recommend adding:\n\n```yaml\n---\ntitle: \"test\"\nformat: html\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n```\n\nThis will make sure that any output you generate while working on your document will be shown in the console. \nIf you don't set this, it will be shown in the document itself, and this can make the document a bit cluttered.\nNote that this doesn't affect the final output of the document, just the way it is shown in the editor.\n\n### 2. The textual content\n\nAfter the header, you can start writing your text.\nThis works like a light version of Word. \nYou can add heading, lists, tables, images, and more.\n\n### 3. The code chunks\n\nAt some point you see a code chunk, which looks like:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n{r}\n1 + 1\n```\n:::\n\n\n\n\nInside these code chunks you can write R code.\nWhen you render the document, the code will be executed, and the output will be shown in the document.\n\nWhile working on the document you can also run the code chunks separately.\nYou can do this like you would do in an R script, by selectin the code you want to run and hitting `Run` (or `Ctrl/Cmd + Enter`).\nBut there is also a convenient option to run the entire code chunk at once by clicking on the `run current chunk` button in the top right of the code chunk.\nHere you also find a button to run all the chunks above the current one.\nIt is recommended to do this often, because it will make sure that the output is up to date.\n\n## Rendering the document\n\nWhen you're done writing your document, or if you want to see a preview, you can `render` the document by clicking the `Render` button in the toolbar (or hitting `Ctrl/Cmd + Shift + K`).\nTry it now!\nIf you did not yet save your Quarto file, R will first ask you to save it.\nYou should then give it a name with the `.qmd` (Quarto Markdown) extension, for example `my-first-quarto-document.qmd`.\nThis should produce an HTML file that opens in your browser (unless you changed something and broke it).\n\nThere is **one big challenge when working with Quarto**, which is also a blessing in disguise.\nIf there is ANY error in your code, the entire document will not render.\nThis can be frustrating, especially if you need to hand in an assignment in a few minutes.\nSo whenever you're working with Quarty, make sure to **frequently render your document** while you're working on it, to catch any errors early on.\nIt is much easier to trace back an error if you only made a few changes since the last time you rendered the document.\nIf you only render the document at the end, you might have to go through the entire document to find the error. (though the error messages will tell you where to look)\n\nSo why is this a blessing in disguise? \nIt forces you to write your code in a way that is clean and well-structured.\nWhen working in an R script, a common mistake to make is that some pieces of code depend on code that is further down in the script.\nFor example, if you use a certain column on line 10, but you only create that column on line 20.\nThis might not pose a problem while you're working on it, but it will bite you when for whatever reason you need to rerun the entire script.\nQuarto forces you to write your code in a way that if you run the entire script from scratch, it will work.\n\n# Some tips and warnings\n\n### Turn on `'Render on save'`\n\nIn the toolbar you can turn on `Render on Save`. This way, any time you save the document, it will try to render. Now make sure to save often (get used to using `Ctrl/Cmd + s`). This way you can catch any rendering errors early on.\n\n### The working directory is the folder where the Quarto file is located\n\nA Quarto file will always use it's own location as the [working directory](../getting-started/file-management.qmd#choosing-working-directory)\nThis is actually quite convenient. \nJust make sure to put your Quarto file in the same directory as your data, and you're good to go.\n\n### Use code block parameters\n\nYou can add parameters to the code chunks.\nFor example, the following code chunk will only show the code, but not the output:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n{r, results=FALSE}\n1 + 1\n```\n:::\n\n\n\n\nFollowing this same notation, you can set the following parameters:\n\n- `{r, results=F}`: show the code, but not the output\n- `{r, eval=F}`: show the code, but do not run it\n- `{r, echo=F}`: do not show the code, but show the output\n- `{r, message=F}`: do not show any messages that are generated by the code. This can for instance hide the message that is printed when you run *library(tidyverse)*.\n- `{r, warning=F}`: do not show any warnings that are generated by the code. This is more dangerous than hiding messages, but if you are sure that the warning is harmless, you can use this to make the document cleaner.\n- `{r, message=F, warning=F}`: separate multiple parameters with a comma.\n- `{r, cache=T}`: cache the output. This way, if you render the document again, but the code chunk did not change, it will not rerun the code. If you have any code that takes a long time to run, this allows you to still render the document quickly (which is especially useful if you have *Render on Save* turned on). Just make sure to turn cache of before rendering the final version, to be sure that everything is up to date.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}