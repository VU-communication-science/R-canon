{
  "hash": "b8f2d7fcda3664313d489a404a21d87a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: File management\nsubtitle: Reading and writing files in R\norder: 6\n---\n\n\n\n\n\n\n\n# Keeping track of your data {#file-management}\n\nIf you're working with data you need to be able to keep track of where you store it, especially if it concerns sensitive data such as personal information.\nIn this section we'll first explain and demonstrate a simple, recommended approach to managing files in R.\nSecondly, we provide some optional material that goes more in-depth on how your computer's file system works, and we provide some additional techniques that give you more flexibility in managing files.\nThis second part is optional, and if you're just starting out with R we recommend skipping it for now.\n\n\n# Recommended approach: stick to your working directory\n\nWhen you read or write files in R, you need to two things:\n\n* **The file name**: This is the name of the file you want to read or write.\n* **The file path**: This is the location of the file on your computer.\n\nThe file name is easy to understand, but to find the file path you need to know a bit about how your computer organizes files.\nIn addition, it's inconvenient to always provide the exact location of a file.\n\nLuckily, there is an alternative. \nWhen you are working in R, you are always working in a specific directory on your computer, called your **working directory**.\nYou can check the current working directory with the `getwd()` (*get working directory*) function:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"/home/kasper/projects\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/home/kasper/projects\"\n```\n\n\n:::\n:::\n\n\n\n\n\nYour working directory will be different from the one shown above, but the general structure is the same.\nIn our case it tells us that the working directory is the `projects` directory in the `home` directory of the user `kasper`.\n\nIf I now write a files and I *only* provide the file name (e.g., `file.csv`), R will create (over overwrite) it in this directory (`/home/kasper/projects/file.csv`).\nWe also refer to this as a **relative path**: by providing just the file name, R will look for it relative to the working directory.\nLet's try this out! \n\n## Writing a file to your working directory\n\nThe following code writes a plain text file name `hello_world.txt` to your current working directory.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteLines(\"Hello world!\", \"hello_world.txt\")\n```\n:::\n\n\n\n\n\nIf you now open your file explorer and navigate to your working directory, you should see the file `hello_world.txt` there.\nNote that there is also a file explorer inside of RStudio, under the `Files` tab in the bottom-right window.\nIf you click on the `gear` (settings) icon there, you can click `Go To Working Directory`.\n\nYou can also ask R to list all the files in your working directory.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files()                    ## show all files\nlist.files(pattern=\"*.txt\")     ## show files with .txt extension\n```\n:::\n\n\n\n\n\n## Reading a file from your working directory\n\nReading files works the same way.\nSince there is now a file `hello_world.txt` in your working directory, you can read it with the following code:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadLines(\"hello_world.txt\")\n```\n:::\n\n\n\n\n\n::: {.callout-note title=\"Directories inside your working directory\" collapse=\"true\"}\nIn this tutorial we only show you how to work with files directly in your working directory, but you can also access directories.\nFor example, if you have a directory called `data` inside your working directory, with a file called `survey.csv` in it, you can access it via the relative path `data/survey.csv`.\nThis is very convenient in bigger projects, where you might want to organize things like data, results and visualizations in different directories.\n:::\n\n## Choosing your working directory\n\nWe highly recommend to always set your working directory to a specific location on your computer. For instance, in a directory called `R_projects,` or even a specific directory for your current project or assignment.\n\n**If you are working in a regular R script**, you can set the working directory with the `setwd()` function.\nFor example, to set the working directory to `/home/you/R_projects`, you can run `setwd(\"/home/you/R_projects\")`.\nIf you prefer using a menu, you can also use **RStudio**: click on `Session` in the menu bar, then `Set Working Directory`, and then `Choose Directory`.\n\n**If you are working in a Quarto file**, ([as we explain here](../getting-started/working-in-quarto.qmd)), the working directory is always the directory where the Quarto file is located (and you cannot change it).\nThis is convenient, because it means that you just need to put the Quarto file and your data together in the directory that you want to work in.\n\nFinally, you can also create an **RStudio project**.\nIn the top-right corner of your RStudio window, you can see a button labeled **Project: (None)**.\nIf you click it, you can create a new project, in a new or existing directory on your computer.\nRStudio will automatically set the working directory to this project directory, and in the top-right corner you will now see the name of the project instead of **Project: (None)**.\n\n\n\n# Optional: working with absolute paths\n\nIn the previous section we showed you the easiest way to manage files in R: by sticking to your working directory.\nThis will get you through most situations, but sometimes it's convenient to be able to read files from other locations on your computer.\nYou can achieve this by specifying the complete path to the file, also called the **absolute path** (as opposed to the **relative path** we used before).\nIf we know that the path to our Desktop is `/home/kasper/Desktop`, we can write a file directly to the Desktop with the following code:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteLines(\"Hello desktop!\", \"/home/kasper/Desktop/hello_desktop.txt\")\n```\n:::\n\n\n\n\n\nNotice that the absolute path **must** start with the root directory, which is `/` on Linux and Mac, and `C:\\` (or another drive) on Windows.\n\nOff course, if *you* run the above line of code it will throw an error saying that there is `No such file or directory` (unless you happen to be another user named `kasper` working on a Linux machine).\nSo in order to work with absolute paths, you'll need to know how to find the path to a file or directory on your computer.\n\n::: {.callout-note title=\"How does your computer organize files?\" collapse=\"true\"}\n\nComputers organize files and directories (or folders) in a hierarchical structure that resembles a tree, called the **file system**.\nThis tree-like structure starts from a single **root directory** and branches out into subdirectories, which can contain more subdirectories or files.\nIt looks a bit different on Windows and Mac (or Linux), but the basic idea is the same.\nHere is a simplified example (normally there are more layers, such as your user directory):\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n/ (Root Directory) \n│\n├── Documents\n│   ├── Work\n│   │   ├── survey.csv\n│   │   └──  \n│   └── Personal\n│       ├── Resume.pdf\n│       └── Budget.xlsx\n│\n├── Downloads\n│   ├── Report.docx\n│   └── image.jpg\n```\n:::\n\n\n\n\n\nBecause of this structure, any file on your computer has a unique **path** that describes its location in the file system.\nFor example, the path to the `Report.docx` file in the `Work` directory would be `/Documents/Work/survey.csv`, or `C:\\Documents\\Work\\survey.csv` on Windows.\n\n:::\n\n## Finding the absolute path    \n\nSo how do you find the absolute path to the file? \nHere are several options.\n\n### Using file.choose()\n\nIf you run the code `file.choose()`, R will open a file explorer window.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.choose()              ## find path of existing file\nfile.choose(new = TRUE)    ## create a path for a new file\n```\n:::\n\n\n\n\n\nHere you can browse to the file, and when you select it, R will print the file path in the console window.\nThis is easy, because you get a nice menu to browse through your files.\nBut it's also a bit cumbersome, because you have to do it every time you want to read a file.\nAlso, you can't select folder, only existing files.\n\n### Using the file explorer\n\nYou can also use your own file explorer (outside of RStudio).\nNavigate to a file or folder, and right click on it. \nYou should then be able to select something like *Properties* (this depends on your operating system).\nHere you should be able to find the absolute path.\n\n### Using tab completion \n\nThere is one other nice trick that you can use to find files on your computer: **tab completion**.\nWhenever you are writing something in a code editor, you can often use the **Tab** key (above caps lock) to automatically complete it (like auto-complete on your phone).\nIf you've ever seen programmers work really fast, it's because they're using tab completion all the time.\n\nTo use tab completion for file paths, put your text cursor between the quotes in `readLines(\"\")` (or any function for reading/writing files), and then press the `Tab` key.\nIf there are multiple files that match the characters you've typed so far, RStudio will show you all the options.\nKeep typing to narrow down the options, and once you see the file or directory you want, press tab again to complete it.\nThis takes some time to get used to, but it's a very powerful trick.\n",
    "supporting": [
      "file-management_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}