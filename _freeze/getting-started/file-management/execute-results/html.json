{
  "hash": "65e75ad575fc22280bde678fac57af8c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: File management\nsubtitle: How to find files on your computer\norder: 6\n---\n\n\n\n\n\n# Keeping track of your data {#file-management}\n\nIn order to read and write data in R, you need to be able to refer to data files by their **file path** (i.e. their name and location on your computer).\nYou can specify this path in two ways: using an **absolute path** (starting from the root directory) or a **relative path** (starting from the current working directory).\nLet's practice a bit using both approaches.\n\nFirst, download <a href=\"../data/fake_demo_data.csv\" download>this CSV file </a>containing some practice data. \nDon't worry about the content for now (we'll get to that later).\nYou computer will probably save it in your `Downloads` directory, but otherwise just pick a location where you can find it.\nCheck to make sure that the file actually downloaded by opening your file explorer (outside of RStudio) and navigating to the file.\n\n::: {.callout-note title=\"How does your computer organize files?\" collapse=\"true\"}\n\nComputers organize files and directories (or folders) in a hierarchical structure that resembles a tree, called the **file system**.\nThis tree-like structure starts from a single **root directory** and branches out into subdirectories, which can contain more subdirectories or files.\nIt looks a bit different on Windows and Mac (or Linux), but the basic idea is the same.\nHere is a simplified example (normally there are more layers, such as your user directory):\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n/ (Root Directory) \n│\n├── Documents\n│   ├── Work\n│   │   ├── survey.csv\n│   │   └──  \n│   └── Personal\n│       ├── Resume.pdf\n│       └── Budget.xlsx\n│\n├── Downloads\n│   ├── Report.docx\n│   └── image.jpg\n```\n:::\n\n\n\n\nBecause of this structure, any file on your computer has a unique **path** that describes its location in the file system.\nFor example, the path to the `Report.docx` file in the `Work` directory would be `/Documents/Work/survey.csv`, or `C:\\Documents\\Work\\survey.csv` on Windows.\n\n:::\n## Reading the file using the absolute path\n\nFirst, let's try to read the file using the absolute path, using the following code.\nDon't worry about understanding the code for now, as we'll get back to this in the [data management chapter](../data-management/read-and-write.qmd).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nread_csv('ENTER THE ABSOLUTE PATH TO THE FILE HERE')\n```\n:::\n\n\n\n\nSo how do you find the absolute path to the file? \nThere are several options, so try to find at least one that you like.\n\n- **Using file.choose()**: If you run the code `file.choose()`, R will open a file explorer window. Here you can browse to the file, and when you select it, R will print the file path in the console window.\n- **From the file explorer**: Open the file explorer on your computer, and navigate to the file. You can then right-click on the file and select *Properties* (or some similar term). Here you'll find the *Location* of the file. \n- **Using RStudio**: For some types of files, you can use the RStudio *data importer* interface. In the bottom-right window, you can go to the `Files` tab. Here you can browse to the file on your computer. If the file is something that you can read into R (e.g., a CSV file), RStudio will give you the `Import Dataset` option. This will open a visual interface for importing the data, that also shows the file path.\n\n::: {.callout-note title=\"Cool kids use tab completion\" collapse=\"true\"}\nThere is one other nice trick that you can use to find files on your computer: **tab completion**.\nWhenever you are writing something in a code editor, you can often use the **Tab** key (above caps lock) to automatically complete it (like auto-complete on your phone).\nIf you've ever seen programmers work really fast, it's because they're using tab completion all the time.\n\nTo use tab completion for file paths, put your text cursor between the quotes in `read_csv(\"\")`, and then press the `Tab` key.\nIf there are multiple files that match the characters you've typed so far, RStudio will show you all the options.\nKeep typing to narrow down the options, and once you see the file or directory you want, press tab again to complete it.\n:::\n\n## Setting your working directory to read files easily {#working-directory}\n\nWhenever you are working in R, you are always working in a specific directory on your computer. \nThis directory is called the **working directory**.\nYou can check the current working directory with the `getwd()` (*get working directory*) function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n\n\n\nIf a file is inside of your working directory, you can easily read it by just providing the file name.\nAlso, if you write a file without specifying a directory, it will be saved in this directory.\nTherefore, a good way to make data management in R easy, is by making a directory for your current project, and setting this as your working directory.\n\nOpen your file explorer (outside of RStudio) and create a directory somewhere with a name like \"R_projects\".\nThen copy the `fake_demo_data.csv` file you downloaded earlier into this directory.\n\nNow, you can set this directory as your working directory in R.\nThere are two ways to do this:\n\n* **Manually**: You can set the working directory with the `setwd()` function. For example, to set the working directory to `/home/you/R_projects`, you can run `setwd(\"/home/you/R_projects\")`.\n* **Using RStudio**: In RStudio, you can set the working directory by clicking on `Session` in the menu bar, then `Set Working Directory`, and then `Choose Directory`. This will open a file explorer window where you can select the directory you want to set as the working directory.\n\nIf you did everything correctly, you should now be able to read the file using the following code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv('fake_demo_data.csv')\n```\n:::\n\n\n\n\n\n# Projects\n\nSetting your working directory can be a good way to manage files on your on computer.\nHowever, if you are working on a project, it can be even more convenient to start an actual **project** in RStudio.\n\nIn the top-right corner of your RStudio window, you can see a button labeled **Project: (None)**.\nIf you click it, you can create a new project. \nYou can create this project in a new or existing directory on your computer.\nThis will mark the directory as a project, and in the top-right corner you will see the name of the project instead of **Project: (None)**.\n\nProjects are very convenient because they allow you to store all your files and data for a project in a single directory.\nThe working directory is automatically set to the project directory, and you can easily access all files in the project from the RStudio interface.\nMoreover, if you share the project with others, they can easily open the project in RStudio and start working on it.\nAs long as you make sure to save all files in the project directory, and use relative paths to access files, your code will work on any computer.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}