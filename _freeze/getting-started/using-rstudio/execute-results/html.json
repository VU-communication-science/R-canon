{
  "hash": "799e1b115a02b4efdc56f083a66c4036",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: How to use RStudio\norder: 1\n---\n\n\n\n\nOnce you have [installed R and RStudio](./install-r-and-rstudio.qmd), you can start by launching RStudio. If everything was installed correctly, RStudio will automatically launch R as well.\n\nThe first time you open RStudio, you will likely see three separate windows. The first thing you want to do is **open an R Script (!!)** to work in. To do so, go to the toolbar and select **File -\\> New File -\\> R Script**.\n\nYou will now see four windows split evenly over the four corners of your screen:\n\n-   In the **top-left** you have the text editor for the file that you are working in. This will most of the time be an R script or RMarkdown file.\n-   In the **top-right** you can see the data and values that you are currently working with (environment) or view your history of input.\n-   In the **bottom-left** you have the console, which is where you can enter and run code, and view the output. If you run code from your R script, it will also be executed in this console.\n-   In the **bottom-right** you can browse through files on your computer, view help for functions, or view visualizations.\n\nWhile you can directly enter code into your console (bottom-left), you should always work with R scripts (top-left). This allows you to keep track of what you are doing and save every step.\n\n## Running code from the R script\n\nCopy and paste the following example code into your R Script. For now, don't bother understanding the syntax itself. Just focus on running it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 + 3\n2 * 5\n6 / 2\n\"some text\"\n\"some more text\"\nsum(1,2,3,4,5)\n```\n:::\n\n\n\nYou can **run** code by selecting the code and clicking on the **Run** button in the toolbar. However, we highly recommend getting used to using the keyboard shortcut, because this will greatly speed up your process. On Windows (and Linux) the shortcut is **Ctrl + Enter**. On Mac it's **Command + Enter**. \n\nThere are two ways to run code:\n\n-   If you select a specific piece of code (so that it is highlighted) you can run this specific selection. For example, select the first three lines (the three mathematical operations) and press Ctrl + Enter. This should then print the results for these three mathematical expressions. Note that you can also select a specific part on a line. Try selecting just the second `3` on the first line. This should just print the number 3. \n-   If you haven't made a selection, but your text cursor is somewhere on a line in your editor, you can press Ctrl + Enter to run the line where the cursor is at. This will also move the cursor to the next line, so you can *walk* through the code from top to bottom, running each line. Try starting on the first line, and pressing Ctrl + Enter six times, to run each line separately.\n\n\n## Using RStudio projects\n\nIt is best to put all your code in an RStudio *project*. This is essentially a folder on your computer in which you can store the R files and data for a project that you are working on. While you do not necessarily need a project to work with R, they are very convenient, and we strongly recommend using them.\n\nTo create a new project, go to the top-right corner of your RStudio window. Look for the button labeled **Project: (None)**. Click on this button, and select New Project. Follow the instructions to create a new directory with a new project. Name the project \"R introduction\".\n\nNow, open a new R script and immediately save it (select File -\\> Save in the toolbar, or press ctrl-s). Name the file **my_first_r_script.r**. In the bottom-right corner, under the **Files** tab, you'll now see the file added to the project. The extension **.r** indicates that the file is an R script.\n",
    "supporting": [
      "using-rstudio_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}