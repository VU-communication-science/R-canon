{
  "hash": "e905fb48c4c86ce44cb24754843b2ca7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Data transformation'\n---\n\n\n\n\n# Introduction\n\nThe goal of this tutorial is to get you acquainted with the [Tidyverse](https://www.tidyverse.org/). Tidyverse is a collection of packages that have been designed around a singular and clearly defined set of principles about what data should look like and how we should work with it. It comes with a nice introduction in the [R for Data Science](http://r4ds.had.co.nz/) book, for which the digital version is available for free. This tutorial deals with most of the material in chapter 5 of that book. \n\nIn this part of the tutorial, we'll focus on working with data using the `tidyverse` package. \nThis package includes the `dplyr` (data-pliers) packages, which contains most of the tools we're using below,\nbut it also contains functions for reading, analysing and visualising data that will be explained later. \n\n## Installing tidyverse\n\nAs before, `install.packages()` is used to download and install the package (you only need to do this once on your computer) and `library()` is used to make the functions from this package available for use (required each session that you use the package).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('tidyverse') # only needed once\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nNote: don't be scared if you see a red message after calling `library`. RStudio doesn't see the difference between messages, warnings, and errors, so it displays all three in red. You need to read the message, and it will contain the word 'error' if there is an error, such as a misspelled package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyvers) # this will cause an error!\n```\n:::\n\n\n# Tidyverse basics\n\nAs in most packages, the functionality in dplyr is offered through functions. \nIn the tidverse package `dplyr`, almost all `functions` primarily operate on data frames, for example for filtering and sorting data. \n\nWith a data set we mean a rectangular data frame consisting of rows and columns.\nIn general, the rows represent the units in your data (e.g., respondents, participants, documents) and the columns represent the variables (e.g., age, gender).\nThese data sets can be R `data.frames`, but tidyverse has its own version of data frames called `tibble`,\nwhich is functionally (almost) equivalent to a data frame but is more efficient and somewhat easier to use. \n\nAs a very simply example, the following code creates a tibble containing respondents, their gender, and their height:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(resp = c(1,2,3), \n       gender = c(\"M\",\"M\",\"F\"), \n       height = c(176, 165, 172))\n```\n:::\n\n\n## Reading data: read_csv\n\nThe example above manually created a data set, but in most cases you will start with data that you get from elsewhere,\nsuch as a csv file (e.g. downloaded from an online dataset or exported from excel) or an SPSS or Stata data file.\n\nTidyverse contains a function `read_csv` that allows you to read a csv file directly into a data frame.\nYou specify the location of the file, either on your local drive or directly from the Internet!\n\nThe example below downloads an overview of gun polls from the [data analytics site 538](https://fivethirtyeight.com/),\nand reads it into a tibble using the read_csv function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://raw.githubusercontent.com/fivethirtyeight/data/master/poll-quiz-guns/guns-polls.csv\"\nd <- read_csv(url)\nd\n```\n:::\n\n\n(Note that you can safely ignore the (red) message, they simply tell you how each column was parsed)\n\nThe shows the first ten rows of the data set, and if the columns don't fit they are not printed. The remaining rows and columns are printed at the bottom. For each column the data type is also mentioned (<int> stands for integer, which is a *numeric* value; <chr> is textual or *character* data). If you want to browse through your data, you can also click on the name of the data.frame (d) in the top-right window \"Environment\" tab \nor call `View(d)`. \n\n\n## Subsetting with filter() \n\nThe `filter` function can be used to select a subset of rows. \nIn the guns data, the `Question` column specifies which question was asked.\nWe can select only those rows (polls) that asked whether the minimum purchage age for guns should be raised to 21:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage21 <- filter(d, Question == 'age-21')\nage21\n```\n:::\n\n\nThis call is typical for a tidyverse function: the first argument is the data to be used (`d`), \nand the remaining argument(s) contain information on what should be done to the data. \n\nNote the use of `==` for comparison: In R, `=` means assingment and `==` means equals. \nOther comparisons are e.g. `>` (greather than), `<=` (less than or equal) and `!=` (not equal).\nYou can also combine multiple conditions with logical (boolean) operators: `&` (and), `|` or, and `!` (not),\nand you can use parentheses like in mathematics. \n\nSo, we can find all surveys where support for raising the gun age was at least 80%:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(d, Question == 'age-21' & Support >= 80)\n```\n:::\n\n\nNote that this command did not assign the result to an object, so the result is only displayed on the screen but not remembered.\nThis can be a great way to quickly inspect your data, but if you want to continue analysing this subset you need to assign it to an object as above.\n\n## Aside: getting help on (tidy) function\n\nAs explained earlier, to get help on a function you can type `?filter` in the console or search for filter in the help pane.\nIn both cases, you need to specify that you mean filter from the dplyr package, as there is also a filter function in other packages.\n\nIf you look at the help page, you will first see the general *description*. This is followed by *Usage*, which shows how the function should be called. In this case, it lists `filter(.data, ...)`. The first argument (`.data`) makes sense, but the `...` is confusing. What is means is that you can give an arbitrary number of extra arguments, that will (in this case) all be used as filters. This is explained in the *Arguments*: the `...` arguments are 'Logical predicates defined in terms of the variables in .data'. \n\nThe remainder give extra information on what exactly the function does (Details), the output it produces (Value), and links to other useful packages, functions, and finally a number examples. \n\nAlthough it may seem intimidating at first, it is important to get used to style of the R documentation as it is the primary source of information on most functions and packages you will be using!\n\n## Selecting certain columns\n\nWhere `filter` selects specific rows, `select` allows you to select specific columns. \nMost simply, we can simply name the columns that we want to retrieve them in that particular order. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(age21, Population, Support, Pollster)\n```\n:::\n\n\nYou can also specify a range of columns, for example all columns from Support to Democratic Support:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(age21, Support:`Democratic Support`)\n```\n:::\n\n\nNote the use of 'backticks' (reverse quotes) to specify the column name, as R does not normally allow spaces in names. \n\nSelect can also be used to rename columns when selecting them, for example to get rid of the spaces:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(age21, Pollster, rep = `Republican Support`, dem = `Democratic Support`)\n```\n:::\n\n\nNote that `select` drops all columns not selected. If you only want to rename columns, you can use the `rename` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrename(age21, start_date = Start, end_date = End)\n```\n:::\n\n\nFinally, you can drop a variable by adding a minus sign in front of a name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(age21, -Question, -URL)\n```\n:::\n\n\n## Sorting with arrange()\n\nYou can easily sort a data set with `arrange`: you first specify the data, and then the column(s) to sort on.\nTo sort in descending order, put a minus in front of a variable.\nFor example, the following orders by population and then by support (descending):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage21 <- arrange(age21, Population, -Support)\nage21\n```\n:::\n\n\nNote that I assigned the result of arranging to the `age21` object again, i.e. I replace the object by its sorted version. \nIf I wouldn't assign it to anything, it would display it on screen but not remember the sorting.\nAssigning a result to the same name means I don't create a new object, preventing the environment from being cluttered\n(and saving me from the bother of thinking up yet another object name).\nFor sorting, this should generally be fine as the sorted data should contain the same data as before.\nFor subsetting, this means that the rows or columns are actually deleted from the dataset (in memory),\nso you will have to read the file again (or start from an earlier object) if you need those rows or columns later. \n\n\n## Adding or transforming variables with mutate()\n\nThe `mutate` function makes it easy to create new variables or to modify existing ones. For those more familiar with SPSS, this is what you would do with compute and recode. \n\nIf you look at the documentation page, you see that mutate works similarly to `filter()` and `select()`, in the sense that the first argument is the *tibble*, and then any number of additional arguments can be given to perform mutations. The mutations themselves are named arguments, in which you can provide any calculations using the existing columns. \n\nHere we'll first create some variables and then look at the variables (using the `select` function to focus on the changes). Specifically, we'll make a column for the absolute difference between the support scores for republicans and democrats, as a measure of how much they disagree.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage21 <- mutate(age21, party_diff = abs(`Republican Support` - `Democratic Support`))\nselect(age21, Question, Pollster, party_diff)\nage21 <- arrange(age21, Population, -Support)\n```\n:::\n\n\nTo transform (recode) a variable in the same column, you can simply use an existing name in `mutate()` to overwrite it.\n\n\n# Working with Pipes\n\nIf you look at the code above, you notice that the result of each function is stored as an object, \nand that this object is used as the first argument for the next function.\nMoreover, we don't really care about this temporary object, we only care about the final summary table. \n\nThis is a very common usage pattern, and it can be seen as a *pipeline* of functions, where the output of each function is the input for the next function.\nBecause this is so common, tidyverse offers a more convenient way of writing the code above using the pipeline operator `%>%`.\nIn sort, whenever you write `f(a, x)` you can replace it by `a %>% f(x)`. If you then want to use the output of `f(a, x)` for a second function,\nyou can just add it to the pipe: `a %>% f(x) %>% f2(y)` is equivalent to `f2(f(a,x), y)`, or more readable, `b=f(a,x); f2(b, y)`\n\nPut simply, pipes take the output of a function, and directly use that output as the input for the `.data` argument in the next function. As you have seen, all the `dplyr` functions that we discussed have in common that the first argument is a *tibble*, and all functions return a *tibble*. This is intentional, and allows us to pipe all the functions together. \n\nThis seems a bit abstract, but consider the code below, which is a collection of statements from above:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- read_csv(url)\nage21 <- filter(d, Question == 'age-21')\nage21 <- mutate(age21, party_diff = abs(`Republican Support` - `Democratic Support`))\nage21 <- select(age21, Question, Pollster, party_diff)\narrange(age21, -party_diff)\n```\n:::\n\n\nTo recap, this reads the csv, filters by question, computes the difference, drops other variables, and sorts.\nSince the output of each function is the input of the next, we can also write this as a single pipeline:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(url) %>% \n  filter(Question == 'age-21') %>% \n  mutate(party_diff = abs(`Republican Support` - `Democratic Support`)) %>%\n  select(Question, Pollster, party_diff) %>% \n  arrange(-party_diff)\n```\n:::\n\n\nThe nice thing about pipes is that it makes it really clear what you are doing. Also, it doesn't require making many intermediate objects (such as `ds`). If applied right, piping allows you to make nicely contained pieces of code to perform specific parts of your analysis from raw input straight to results, including statistical modeling or visualization. It usually makes sense to have each \"step\" in the pipeline in its own line. This way, we can easily read the code line by line\n\nOf course, you probably don't want to replace your whole script with a single pipe, and often it is nice to store intermediate values.\nFor example, you might want to download, clean, and subset a data set before doing multiple analyses with it.\nIn that case, you probably want to store the result of downloading, cleaning, and subsetting as a variable, and use that in your analyses.\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}