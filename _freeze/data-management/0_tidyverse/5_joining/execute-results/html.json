{
  "hash": "e8211f233f9303cdeabb552a2377c947",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Joining data\n---\n\n\n\n\n\n\n\n# Joining data\n\nIn many cases, you need to combine data from multiple data sources. \nFor example, you can combine a sentiment analysis of tweets with metadata about the tweets;\nor data on election results with data about the candidates ideological positions or details on the races. \n\nThis tutorial will teach you the `inner_join` and other `_join` commands used to combine two data sets on shared columns. \nSee [R4DS Chapter 13: Relational Data](http://r4ds.had.co.nz/relational-data.html) for more information and examples. \n\n## Data\n\nFor this tutorial, we will look at data describing the US presidential primaries.\nThese data can be downloaded from the [Houston Data Visualisation github page](https://github.com/houstondatavis/data-jam-august-2016), who in turn got it from [Kaggle](https://www.kaggle.com/benhamner/2016-us-election). \n\nIn the CSV folder on the github, you can find (among others)\n\t\t\n- `primary_results.csv` Number of votes in the primary per county per candidate\n- `primary_schedule.csv` Dates of each primary per state and per party\n- `county_facts.csv` Information about the counties and states, including population, ethnicity, age, etc. \n\nFor many research questions, we need to be able to combine the data from these files. \nFor example, we might want to know if Clinton did better in counties or states with more women (needing results and facts), or how Trump's performance evolved over time (requiring results and calendar).\n\n## Downloading and preparing the data\n\nBefore we start, let's download the three data files:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\ncsv_folder_url <- \"https://raw.githubusercontent.com/houstondatavis/data-jam-august-2016/master/csv\"\nresults <- read_csv(paste(csv_folder_url, \"primary_results.csv\", sep = \"/\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 24611 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): state, state_abbreviation, county, party, candidate\ndbl (3): fips, votes, fraction_votes\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nfacts <- read_csv(paste(csv_folder_url, \"county_facts.csv\", sep = \"/\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 3195 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): area_name, state_abbreviation\ndbl (52): fips, Pop_2014_count, Pop_2010_base_count, Pop_change_pct, Pop_201...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nschedule  <- read_csv(paste(csv_folder_url, \"primary_schedule.csv\", sep = \"/\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 113 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): date, state, party, type\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\nNote: I use `paste` to join the base url with the filenames, using a `/` as a `sep`arator.\n\nHave a look at all three data sets. Before we proceed, there are some things we want to do. \nFirst, the `facts` data frame is really large, with 54 columns. Let's select a couple interesting ones to work with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfacts_subset <- facts %>% \n  select(area_name, \n         population = Pop_2014_count, \n         pop_change = Pop_change_pct, \n         over65 = Age_over_65_pct, \n         female = Sex_female_pct, \n         white = Race_white_pct, \n         college = Pop_college_grad_pct, \n         income = Income_per_capita)\n```\n:::\n\n\n\n\nNext, the schedule dates are now a character (textual) field rather than date, so let's fix that\nusing the `as.Date` function, specifying the dates to be formatted as month/day/year:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nschedule <- schedule %>% \n  mutate(date = as.Date(date, format=\"%m/%d/%y\"))\n```\n:::\n\n\n\n\nLast, let's create a data set with per-state (rather than per-country) election results using `group_by` and `summarize`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_state <- results %>% \n  group_by(state, party, candidate) %>% \n  summarize(votes = sum(votes))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'state', 'party'. You can override using\nthe `.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nresults_state\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 290 × 4\n# Groups:   state, party [95]\n   state   party      candidate        votes\n   <chr>   <chr>      <chr>            <dbl>\n 1 Alabama Democrat   Bernie Sanders   76399\n 2 Alabama Democrat   Hillary Clinton 309928\n 3 Alabama Republican Ben Carson       87517\n 4 Alabama Republican Donald Trump    371735\n 5 Alabama Republican John Kasich      37970\n 6 Alabama Republican Marco Rubio     159802\n 7 Alabama Republican Ted Cruz        180608\n 8 Alaska  Democrat   Bernie Sanders     440\n 9 Alaska  Democrat   Hillary Clinton     99\n10 Alaska  Republican Ben Carson        2401\n# ℹ 280 more rows\n```\n\n\n:::\n:::\n\n\n\n\nNote: see [R-tidy-5-transformations](R-tidy-5-transformation.md) if you are unsure about the transformations above!\n\n# Simplest case: `inner_join`\n\nThe basic command for joining data in R is the `inner join`. It takes two data frames and joins it on any variable that occurs in both. \nIt results in a new data frame with the information in both frames joined together.\nFor example, this adds the dates to all primary results (per state)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(results_state, schedule)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(state, party)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 290 × 6\n# Groups:   state, party [95]\n   state   party      candidate        votes date       type         \n   <chr>   <chr>      <chr>            <dbl> <date>     <chr>        \n 1 Alabama Democrat   Bernie Sanders   76399 2016-03-01 Open primary \n 2 Alabama Democrat   Hillary Clinton 309928 2016-03-01 Open primary \n 3 Alabama Republican Ben Carson       87517 2016-03-01 Open primary \n 4 Alabama Republican Donald Trump    371735 2016-03-01 Open primary \n 5 Alabama Republican John Kasich      37970 2016-03-01 Open primary \n 6 Alabama Republican Marco Rubio     159802 2016-03-01 Open primary \n 7 Alabama Republican Ted Cruz        180608 2016-03-01 Open primary \n 8 Alaska  Democrat   Bernie Sanders     440 2016-03-26 Closed caucus\n 9 Alaska  Democrat   Hillary Clinton     99 2016-03-26 Closed caucus\n10 Alaska  Republican Ben Carson        2401 2016-03-01 Closed caucus\n# ℹ 280 more rows\n```\n\n\n:::\n:::\n\n\n\n\n# Specifying columns\n\nBy default, joining is performed with all shared columns as joining *keys*.\nIf this is not correct, you can specify the joining key with the `by=` option.\nA common use case is if the variable names are not the same, for example the state in the `facts` data is coded as `area_name`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(results_state, facts_subset, by = c(\"state\" = \"area_name\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 290 × 11\n# Groups:   state, party [95]\n   state   party      candidate  votes population pop_change over65 female white\n   <chr>   <chr>      <chr>      <dbl>      <dbl>      <dbl>  <dbl>  <dbl> <dbl>\n 1 Alabama Democrat   Bernie S…  76399    4849377        1.4   15.3   51.5  69.7\n 2 Alabama Democrat   Hillary … 309928    4849377        1.4   15.3   51.5  69.7\n 3 Alabama Republican Ben Cars…  87517    4849377        1.4   15.3   51.5  69.7\n 4 Alabama Republican Donald T… 371735    4849377        1.4   15.3   51.5  69.7\n 5 Alabama Republican John Kas…  37970    4849377        1.4   15.3   51.5  69.7\n 6 Alabama Republican Marco Ru… 159802    4849377        1.4   15.3   51.5  69.7\n 7 Alabama Republican Ted Cruz  180608    4849377        1.4   15.3   51.5  69.7\n 8 Alaska  Democrat   Bernie S…    440     736732        3.7    9.4   47.4  66.9\n 9 Alaska  Democrat   Hillary …     99     736732        3.7    9.4   47.4  66.9\n10 Alaska  Republican Ben Cars…   2401     736732        3.7    9.4   47.4  66.9\n# ℹ 280 more rows\n# ℹ 2 more variables: college <dbl>, income <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n# Left and right joins\n\nAs seen above, `inner_join` keeps only rows that occur in both data sets: \nthe county-level facts are (silently) dropped because their names don't occur in the state results.\n\nSometimes this is undesirable. For example, suppose we have data on candidate age, but not on all candidates:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- tibble(candidate = c(\"Hillary Clinton\", \"Bernie Sanders\", \"Donald Trump\"), \n              age = c(70, 77, 72))\nage\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  candidate         age\n  <chr>           <dbl>\n1 Hillary Clinton    70\n2 Bernie Sanders     77\n3 Donald Trump       72\n```\n\n\n:::\n:::\n\n\n\n\nNow, if we would do an `inner_join` with the election results it would drop all other candidates (since they do not occur in the age dataset):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(results_state, age)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(candidate)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 144 × 5\n# Groups:   state, party [95]\n   state    party      candidate        votes   age\n   <chr>    <chr>      <chr>            <dbl> <dbl>\n 1 Alabama  Democrat   Bernie Sanders   76399    77\n 2 Alabama  Democrat   Hillary Clinton 309928    70\n 3 Alabama  Republican Donald Trump    371735    72\n 4 Alaska   Democrat   Bernie Sanders     440    77\n 5 Alaska   Democrat   Hillary Clinton     99    70\n 6 Alaska   Republican Donald Trump      7346    72\n 7 Arizona  Democrat   Bernie Sanders  163400    77\n 8 Arizona  Democrat   Hillary Clinton 235697    70\n 9 Arizona  Republican Donald Trump    249916    72\n10 Arkansas Democrat   Bernie Sanders   64868    77\n# ℹ 134 more rows\n```\n\n\n:::\n:::\n\n\n\n\nYou can prevent this from occurring by using `left_join`, which always keeps all rows in the first dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(results_state, age)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(candidate)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 290 × 5\n# Groups:   state, party [95]\n   state   party      candidate        votes   age\n   <chr>   <chr>      <chr>            <dbl> <dbl>\n 1 Alabama Democrat   Bernie Sanders   76399    77\n 2 Alabama Democrat   Hillary Clinton 309928    70\n 3 Alabama Republican Ben Carson       87517    NA\n 4 Alabama Republican Donald Trump    371735    72\n 5 Alabama Republican John Kasich      37970    NA\n 6 Alabama Republican Marco Rubio     159802    NA\n 7 Alabama Republican Ted Cruz        180608    NA\n 8 Alaska  Democrat   Bernie Sanders     440    77\n 9 Alaska  Democrat   Hillary Clinton     99    70\n10 Alaska  Republican Ben Carson        2401    NA\n# ℹ 280 more rows\n```\n\n\n:::\n:::\n\n\n\n\nAs you can see, Ben Carson and others are still in the data, with missing values (NA) in their age column.\nLeft join keeps all rows in the first data sets, but drops rows in the second data set that don't occur in the first. \nRight join does the opposite, keeping all rows in the second data set but potentially dropping rows in the first.\nFinally, `full_join` keeps all rows that occur in either data set. \n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}