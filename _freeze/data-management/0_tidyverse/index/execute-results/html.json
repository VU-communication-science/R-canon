{
  "hash": "24f8a8261bfebd3b9ebc487c15667575",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: The Tidyverse Toolkit\norder: 0\n---\n\n\n\n::: {.callout-note title=\"The tidyverse versus base R\" collapse=\"true\"}\nMany of the things that the tidyverse allows you to do are also possible in *base R* (i.e. the basic installation of R).\nBase R also provides functions for importing, managing and visualizing data.\nSo why do we need the tidyverse?\n\nThe tidyverse is an *opinionated* framework, which means that it doesn't just *enable* you to do things, but also suggests how you *should* do things.\nThe authors have thought long and hard about how to make data management easy, effective and intuitive (they have even [written papers](https://www.jstatsoft.org/article/view/v059i10) about it).\nThis not only makes the tidyverse much easier and intuitive to learn, but also makes sure everyone writes their code in the same way, which improves transparency and shareability.\n\nThis is different from base R, which is designed to be a highly flexible programming language, that allows you to do almost anything.\nAccordingly, it is still worthwhile to learn base R at some point if you want to specialize more in computational research methods.\nBut for our Communication Science program, and for many data science applications in general, you can do all your data management in the tidyverse.\n:::\n\nThe [tidyverse](https://www.tidyverse.org) is collection of R packages that makes it much easier to import, manage and visualize data.\nTo use the tidyverse, you only need to open the `tidyverse` package, and it will automatically open all of the tidyverse R packages.\n\nLike any normal package, you need to first install it once:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('tidyverse')\n```\n:::\n\n\n\n\nThen in every script that you use the package, you open it with `library`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n## What packages does the tidyverse contain?\n\nNotice above that when you run `library(tidyverse)`, R prints all the tidyverse packages that it opened for you. Some of the most important ones that we'll we using are:\n\n* [tibble](https://tibble.tidyverse.org/). An optimized way for structuring *rectangular data* (basically: a spreadsheet of rows and columns)\n* [dplyr](https://dplyr.tidyverse.org/). Functions for manipulating tibbles: select and rename columns, filter rows, mutate values, etc.\n* [readr](https://readr.tidyverse.org/). Read data into R. \n* [ggplot2](https://ggplot2.tidyverse.org/). One of the best visualization tools out there. Check out the [gallery](https://r-graph-gallery.com/)\n\n::: {.callout-warning title=\"What about the 'Conflicts'?\" collapse=\"true\"}\nWhen opening the tidyverse, and when opening packages in general, you can get a `Conflicts` warning. \nA very common warning for the tidyverse is:\n\n```\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n\nSo what does this mean, and should we be worried?\n\nSince anyone can write new packages for R, it can happen that two packages provide functions with the same name.\nIn this example, we see that the `filter` function exists in both the `dplyr` package (which we opened by opening the tidyverse), and in the `stats` package (which is included in base R).\nSo now R needs to decide which version of the function to use when you type `filter()`.\nIn this case, it says that the `dplyr::filter()` **masks** `stats::filter()`, meaning that it will now use the `dplyr` version.\n\nIn practice, this will rarely be a problem, because you seldom need two versions of a function in the same script.\nBut if you ever do, there is a simple solution. Instead of just using `filter()`, you can type `dplyr::filter()` to specifically use this version.\nIn the following code, we use this notation to specifically open the help page for `dplyr::filter` and `stats::filter`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?dplyr::filter()\n?stats::filter()\n```\n:::\n\n\n\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}