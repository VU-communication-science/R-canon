{
  "hash": "1550b7584f763ade7ae991fc2d51e0a8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Filter and Arrange\"\nsubtitle: Filter rows and arrange them in a specific order\norder: 2\n---\n\n\n\n\n\nIn this tutorial we use the `tidyverse` and our simulated [practice data](../data-management/index.qmd#practice-data).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nd <- read_csv(\"https://tinyurl.com/R-practice-data\")\n```\n:::\n\n\n\n\n\n\n# Subsetting rows with filter() {#filter} \n\nThe `filter` function can be used to select a subset of rows. \nThe first argument of the `filter` function is the tibble you want to filter.\nThe second argument is the condition that should be met for a row to be included in the result.\nLet's say we want to select only the rows where the `experiment_group` column is equal to `control`.\nWe can then use the `==` (is equal to) operator.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(d, experiment_group == 'control')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 200 × 7\n     age np_subscription `news consumption` experiment_group trust_t1 trust_t2\n   <dbl> <chr>                        <dbl> <chr>               <dbl>    <dbl>\n 1    29 no                            9.39 control              5.13     5.53\n 2    25 no                            7.22 control              4.71     2.84\n 3    37 yes                          13.0  control              6.33     7.32\n 4    62 yes                          12.2  control              5.11     4.71\n 5    62 yes                          10.6  control              6.46     5.92\n 6    59 yes                          10.9  control              7.14     6.25\n 7    19 yes                          10.1  control              4.28     2.24\n 8    22 no                           12.6  control              4.98     5.34\n 9    25 no                            6.55 control              3.62     4.94\n10    44 no                            8.91 control              5.12     3.27\n# ℹ 190 more rows\n# ℹ 1 more variable: id <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\nThis gives us the 200 rows (out of 600) where the `experiment_group` is `control`.\n\nWe can use other common operators as well, such as `>`, `<`, `>=`, `<=`, and `!=` (not equal).\nAnd we can also combine multiple conditions with the `&` (and) and `|` (or) operators. \n\nFor example, here we select all rows where the `experiment_group` is `control` and the `age` is greater than 30:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(d, experiment_group == 'control' & age > 30)\n```\n:::\n\n\n\n\n\nA less common operator that is usefull to know about is `%in%`, which is used to check if a value is in a list of values.\nFor example, to select all rows where the `experiment_group` is either `positive` or `negative`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(d, experiment_group %in% c('positive', 'negative'))\n```\n:::\n\n\n\n\n\nYou an also *invert* any condition by putting a `!` (NOT) in front of it.\nSo the following code selects all rows where the `experiment_group` is NOT in the list `positive` or `negative`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(d, !experiment_group %in% c('positive', 'negative'))\n```\n:::\n\n\n\n\n\n::: {.callout-note title=\"A deeper understanding of the filter condition\" collapse=\"true\"}\n\nBased on the examples given you probably already have a good enough understanding of how the `filter` function works to use it in your own code.\nIn this optional information block we'll go a bit deeper into how the filter condition works, and what operators you can use.\n\n## The condition is a logical expression\n\nThe condition in `filter` can be any **logical expression**.\nA logical expression is simply a statement that is either `TRUE` or `FALSE`.\nWhen we use a logical expression in the `filter` function, we are asking R to evaluate this expression for each row in the tibble. \nEach row for which the expression evaluates to `TRUE` is then included in the subset.\n\nIf you know a bit about how logical expressions work, you will have great control over what rows are included in your subset.\nHere is an overview of the most important operators for logical expressions.\n\n### Comparison operators\n\nComparison operators are used to compare two values.\n\n- `==`   equal to\n- `!=`   not equal to\n- `>`    greater than\n- `>=`   greater than or equal to\n- `<`    less than\n- `<=`   less than or equal to\n- `%in%` is in a list of values (second value must be a list or vector) \n\nExample: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 > 1    # TRUE:  5 is greater than 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n5 < 1    # FALSE: 5 is less than 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n\"A\" %in% c(\"A\", \"B\", \"C\")  # TRUE: \"A\" is in the list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n\"A\" %in% c(\"B\", \"C\", \"D\")  # FALSE: \"A\" is not in the list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n\n### Logical operators\n\nLogical operators are used to combine multiple conditions.\n\n- `&` and\n- `|` or\n- `!` not\n\nExample:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 > 1 | 5 < 1   # TRUE: 5 is greater than 1 OR 5 is less than 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n5 > 1 & 5 < 1   # FALSE: 5 is greater than 1 AND 5 is less than 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n!5 < 1          # TRUE: it is not the case that 5 is smaller than 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n### Using equations\n\nYou can also use equations in your conditions.\nFor example, to select all rows where the absolute difference between `trust_t1` and `trust_t2` is greater than 2:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(d, abs(trust_t2 - trust_t1) > 2)\n```\n:::\n\n\n\n\n\n### Parentheses\n\nFor complex conditions, you can use parentheses to group conditions, similar to how you would in a mathematical expression.\nFor example, say that you want to inspect *surprising* cases where trust in journalists decreased after watching the positive movie, or increased after watching the negative movie.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(d, (experiment_group == 'positive' & trust_t2 < trust_t1) |\n          (experiment_group == 'negative' & trust_t2 > trust_t1))\n```\n:::\n\n\n\n\n:::\n\n# Filtering out missing values\n\nFiltering out cases with missing values works a bit differently.\nMissing values in R are represented by `NA`, but you **cannot (!!)** use something like `filter(d, age != NA)`.\nInstead, you can use the `is.na` function to check if a value is missing.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(d, is.na(age))     ## rows where age IS missing\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 7\n    age np_subscription `news consumption` experiment_group trust_t1 trust_t2\n  <dbl> <chr>                        <dbl> <chr>               <dbl>    <dbl>\n1    NA no                            6.13 positive             5.39     4.76\n2    NA yes                          11.5  positive             5.17     4.65\n3    NA no                            2.50 control              4.63     5.97\n4    NA yes                           9.13 positive             6.44     6.21\n5    NA no                            8.39 negative             5.60     4.75\n# ℹ 1 more variable: id <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(d, !is.na(age))    ## rows where age IS NOT missing\n```\n:::\n\n\n\n\n\nIn addition, there is a special function in the `tidyverse` for removing rows if ANY column in the data is missing.\nThis is the `drop_na` function.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrop_na(d)\n```\n:::\n\n\n\n\n\nThis returns 595 rows (out of 600) because 5 rows had missing values in the `age` column.\n\n# Sorting rows with arrange() {#arrange}\n\nThe `arrange` function can be used to sort the rows of a tibble.\nFor example, if we want to sort the data by the `age` column:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(d, age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 600 × 7\n     age np_subscription `news consumption` experiment_group trust_t1 trust_t2\n   <dbl> <chr>                        <dbl> <chr>               <dbl>    <dbl>\n 1    18 no                           6.78  negative             3.36     2.68\n 2    18 no                           9.00  positive             4.73     5.75\n 3    18 yes                         13.7   control              3.35     4.85\n 4    19 no                          13.3   negative             2.73     1.14\n 5    19 yes                         10.1   control              4.28     2.24\n 6    19 no                           5.11  control              3.49     3.56\n 7    19 no                           0.763 negative             3.65     1   \n 8    19 yes                         13.2   control              1.97     1.66\n 9    19 no                          10.1   positive             3.24     3.80\n10    19 no                           5.18  negative             3.36     1.55\n# ℹ 590 more rows\n# ℹ 1 more variable: id <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\nBy default, the rows are sorted in ascending order.\nIf you want to sort in descending order, you can put a minus in front of the variable name.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(d, -age)\n```\n:::\n\n\n\n\n\nIf you want to sort on multiple columns, you can simply add them to the `arrange` function.\nFor example, to sort first on `experiment_group` (ascending) and then on `age` (descending):\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(d, experiment_group, -age)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}