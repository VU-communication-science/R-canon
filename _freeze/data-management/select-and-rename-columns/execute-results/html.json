{
  "hash": "a73fe44e8e80ca1ba0ca909161e26f0e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Select and rename columns'\norder: 1\n\n---\n\n\n\n\n\n::: {.callout-note title=\"TLDR summary\" collapse=\"true\"}\n\nTo select columns from a tibble (or data frame), you can use the `select` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nd <- read_csv(\"https://tinyurl.com/R-practice-data\")\n\n# select columns age and np_subscription\nd_subset <- select(d, age, np_subscription)\n\n# select columns from experiment_group to trust_t2\nd_subset <- select(d, experiment_group:trust_t2)\n\n# select columns and rename them\nd_subset <- select(d, group = experiment_group, \n                      trust_before = trust_t1, \n                      trust_after = trust_t2)\n\n# select columns with spaces in the name\nd_subset <- select(d, news_consumption = `news consumption`)\n\n# drop columns\nd_subset <- select(d, -np_subscription, -trust_t1)\n```\n:::\n\n\n\n\nYou can also rename columns without selecting them using the `rename` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_renamed <- rename(d, group = experiment_group, \n                        trust_before = trust_t1, \n                        trust_after = trust_t2)\n```\n:::\n\n\n\n:::\n\nIn this tutorial we use the `tidyverse` and our simulated [practice data](../data-management/index.qmd#practice-data).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nd <- read_csv(\"https://tinyurl.com/R-practice-data\")\n```\n:::\n\n\n\n\n# Selecting columns with `select`\n\nOften you do not need to use all columns in your data, or you only need a subset of the columns for a specific analysis.\nYou can do this with the `select` function.\n\nFirst, let's see what columns are in our data using the `colnames` function, which returns the column names of a data frame:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"age\"              \"np_subscription\"  \"news consumption\" \"experiment_group\"\n[5] \"trust_t1\"         \"trust_t2\"         \"id\"              \n```\n\n\n:::\n:::\n\n\n\n\n### Selecting specific columns\n\nThe simplest way of using `select` is to explicitly specify the columns you want to keep:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds <- select(d, age, np_subscription)\n```\n:::\n\n\n\n\nThis will return a new tibble with only the columns `id`, `age`, and `np_subscription`.\nWe assigned this new tibble to the variable `ds` (short for \"data subset\").\nSometimes you want to overwrite the original data frame with the new selection.\nYou can do this by assigning the result to the same name as the input (`d` in this case):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- select(d, age, np_subscription)\n```\n:::\n\n\n\n\nJust be carefull with this. \nOne of the nice things about R is that you can have multiple versions of your data in different tibbles.\nIt is often smart to at least keep the original (raw) data frame intact.\n\n### Selecting a range of columns\n\nYou can also specify a range of columns using the syntax `first_column:last_column`.\nFor example, to select all columns from `experiment_group` to `trust_t2`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(d, experiment_group:trust_t2)\n```\n:::\n\n\n\n\nThis will return a new tibble with only the columns `experiment_group`, `trust_t1`, and `trust_t2`.\n\nNote that here we did not assign the result to anything.\nSo in this case R will just print the result to the console, but not store it in a variable.\n\n### Selecting and renaming columns\n\nWhen you select a column, you can also rename it using the syntax `new_name = old_name`. \nThe following code selects the columns `experiment_group`, `trust_t1`, and `trust_t2`, and renames them to `group`, `trust_before`, and `trust_after`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(d, group = experiment_group, \n          trust_before = trust_t1, \n          trust_after = trust_t2)\n```\n:::\n\n\n\n\n\n### Selecting columns that have spaces in the name  \n\nSometimes columns names have spaces in them.\nThis is a bit annoying to work with in R, because you need to then tell R where a name starts and ends.\nYou can do this by using backticks (reverse quotes) around the column name. \nIn our practice data, we need this to select the `news consumption` column.\nIt is then often smart to immediately rename the column to something without spaces, such as just replacing them with underscores:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(d, news_consumption = `news consumption`)\n```\n:::\n\n\n\n\n### Dropping columns\n\nInstead of selecting which column to keep, you can also specify which columns to drop.\nYou can do this by adding a minus sign in front of the column name.\nThe following code drops the columns `np_subscription` and `trust_t1`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(d, -np_subscription, -trust_t1)\n```\n:::\n\n\n\n\nThis will return a new tibble with all columns except `np_subscription` and `trust_t1`.\n\n\n# Renaming columns with `rename`\n\nSometimes you only want to rename columns without selecting or dropping any.\nYou can do this with the `rename` function, which works similarly to how you rename columns with `select`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrename(d, group = experiment_group, \n          trust_before = trust_t1, \n          trust_after = trust_t2)\n```\n:::\n\n\n\n\nIn this case, we do rename the columns, but without dropping all the other columns.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}