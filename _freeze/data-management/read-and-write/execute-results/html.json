{
  "hash": "84aa5c20228b5756c74bf291b417de29",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Read and write data\norder: 1\nsubtitle: How to get data into R, and how to store it\n---\n\n\n\n\n\n\n::: {.callout-note title=\"TLDR summary\" collapse=\"true\"}\n\nOne of the most common formats for storing and sharing rectangular data (i.e., data in rows and columns) is the `csv` format.\nWith the `read_csv` and `write_csv` functions you can easily read and write CSV files in R. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# read CSV file from the internet\nd  <- read_csv(\"https://tinyurl.com/R-practice-data\")\n\n# write to a CSV file on your computer\nwrite_csv(d, \"my_data.csv\")                            \n\n# read CSV file from your own computer \nd2 <- read_csv(\"my_data.csv\")                          \n```\n:::\n\n\n\n\n\n:::\n\n\n# Reading and writing data {#importing-data}\n\nR can read files from many types of file formats.\nHere we will focus on the **csv** format, which is one of the most common formats for storing and sharing rectangular data (i.e., data in rows and columns).\nOnce you know how to read a CSV file, you can easily read other file formats as well (e.g., **Excel**, **SPSS**).\n\n## CSV files\n\n::: {.callout-note title=\"What is a CSV file?\" collapse=\"true\"}\n`CSV` stands for Comma Separated Values.\nIt is a simple text file, that you can open in any text editor.\nIn order to store a data frame (i.e. data in rows and colums), it simply read every line as a row, and separates the columns by a comma (or sometimes another symbol, like a semicolon).\n\nFor example, the following CSV file contains a data frame with three columns: `resp_id`, `gender`, and `height`. \nThe first row contains the column names, and the following rows contain the data.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresp_id,gender,height\n1,M,176\n2,M,165\n3,F,172\n4,F,160\n```\n:::\n\n\n\n\n\nThe benefit of this simplicity is that any respectable spreadsheet or statistical software (e.g., Excel, Google sheets, SPSS, Stata) can read it. \nThis makes CSV files a great way to share and store data.\n\nAnd just in case you're worried, yes, CSV can also handle textual data.\nIt uses some tricks to make sure that commas inside the text are not interpreted as column separators.\n:::\n\n\nTo show you how to work with CSV files, we'll first import a dataset from the internet. Then we'll show how to write this data to a CSV file on your computer, and how to read it back into R.\n\n### Importing data from a URL\n\nTo read CSV files into R, you can use the `read_csv` from the tidyverse (more specifically from the `readr` package).\nIf you provide a URL, it will download the file from the internet.\nHere we read the data and assign it to the name `d` (short for data).\nYou can use any name you like, but since you'll be referring to this data a lot, it's convenient to keep it short.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nurl <- \"https://tinyurl.com/R-practice-data\"\nd <- read_csv(url)\n```\n:::\n\n\n\n\n\nMake sure to always check whether the data was imported correctly:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd\n```\n:::\n\n\n\n\n\nYou can also view the data in a larger spreadsheet-like view using the `View` function.\nEither click on the name (`d`) in the **Environment** tab in RStudio (top right panel), or use the `View` function:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(d)\n```\n:::\n\n\n\n\n\nThis will open a new tab in RStudio that shows all the data. \nIn the top menu bar you can also `filter` the data and `search` for specific values, or click on column names to sort the data.\n\n\n### Writing data to a CSV file on your computer\n\nYou can use the `write_csv` function to write a tibble to a CSV file on your computer.\nIf you just provide a file name, it will be saved in your current working directory.\n[Remember](../getting-started/file-management.qmd#working-directory) that you can set your working directory with `setwd()`, or using the RStudio interface (`Session -> Set Working Directory -> Choose Directory`).\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(d, \"practice_data.csv\")\n```\n:::\n\n\n\n\n\nThis will write the `d` tibble to a file called `practice_data.csv` in your current working directory.\nTry finding it in your file system!\n\n### Reading data from a CSV file on your computer\n\nNow let's read this file back into R.\nSince the file is in your working directory, you can just specify the file name:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd2 <- read_csv(\"practice_data.csv\")\n```\n:::\n\n\n\n\n\nYou can check and verify that the data (d2) is indeed identical to the original data (d).\n\n::: {.callout-warning title=\"CSV pitfalls to avoid\" collapse=\"true\"}\nThere are two important pitfalls to avoid when working with CSV files:\n\n### Pitfall 1: Corrupting the file by opening it in Excel\n\nWhen you download a CSV file from the internet, some computers might immediately ask you whether you want to open it in your default spreadsheet program (e.g., Excel, Numbers). \nDo not do this, but instead download the file directly to your computer. If you open the file and accidentally save it, it can overwrite the CSV file with a different format. \nExcel in particular has a habit of breaking CSV files this way. \n\n### Pitfall 2: Different flavours of CSV files\n\nThere are different flavours of CSV files (for historic reasons). \nEven though we call them \"comma separated values\", the separator is sometimes a semicolon or a tab. \nAnd depending on language, the decimal separator can be a comma or a dot. In particular, there are two most common versions of the CSV file. \nThis is why tidyverse has two `read_csv` functions: `read_csv` and `read_csv2`. In general, you can just try `read_csv` first, and if it doesn't work, try `read_csv2`.\n:::\n\n## Reading other file formats, like Excel and SPSS\n\nNow that you know how to read and write CSV files, reading other file formats is a piece of cake.\nIt works almost the same way, but you just need to download a package that can read the file format.\n\nFor instance, to read an Excel file, you can use the `readxl` package, which provides the `read_excel` function. \nTo read an SPSS file, you can use the `haven` package, which provides the `read_sav` function.\nYou might have to take care of some additional details, such as the sheet name in the Excel file, or the variable labels in the SPSS file.\nBut once you've got the hang of managing your data with the tidyverse, you'll be able to handle any data frames formats that come your way.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}