{
  "hash": "74619fe930d2f81c9ff955610c1cfb02",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using the pipe syntax\"\nsubtitle: \"How to make your code more readable\"\norder: 6\n---\n\n\n\n\n\n# Working with Pipes\n\nIn the [Functions](../getting-started/functions.qmd#using-the-pipe-syntax) tutorial we already mentioned that R also has a `pipe` syntax. \nThis is a way to chain functions together, where the output of one function is the input of the next function.\nThe syntax for the pipe is `|>`, and it is used like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargument1 |> function(argument2)\n```\n:::\n\n\n\n\nThe first argument of a funtion can be *piped into it*. \nBetween the parentheses of the function we then only need to specify any additional arguments (if needed).\nOften the first argument of a function is the input data, which allows you to chain functions together.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> \n   do_this() |> \n   then_this() |>\n   finally_this()\n```\n:::\n\n\n\n\n\n## Using pipes with the tidyverse\n\nThe tidyverse is designed to work really well with pipes.\nAll of the functions for working with a tibble (like `select`, `filter`, `arrange`, etc.) have the first argument as the tibble itself, and the output is also a tibble.\nThis means that you can chain these functions together to create a single pipeline for cleaning and preparing your data.\n\nFor example, the following code reads a csv file, selects columns, filters rows and finally arranges the data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\npractice_data = read_csv(\"https://tinyurl.com/R-practice-data\")\npractice_data = select(practice_data, age, experiment_group, trust_t1)\npractice_data = filter(practice_data, age >= 18)\npractice_data = arrange(practice_data, trust_t1)\n```\n:::\n\n\n\n\nWith pipes, we can write the same code in a more readable way:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npractice_data = read_csv(\"https://tinyurl.com/R-practice-data\") %>%\n  select(age, experiment_group, trust_t1) %>%\n  filter(age >= 18) %>%\n  arrange(trust_t1)\n```\n:::\n\n\n\n\n::: {.callout-note title=\"The alternative pipe symbol `%>%`\" collapse=\"true\"}\n\n\nThere is another pipe symbol in R: `%>%`.\nIn this book we will always use `|>`, but it's good to know about the existence of `%>%`, because you might encounter it in other resources.\n\nBoth functions work almost in the same way.\nSo why have two?\nThe reason is simply that R keeps evolving, and the `|>` pipe was only recently introduced.\n\nThe `%>%` pipe was introduced in the `magrittr` package, and was made popular by the `tidyverse`. \nBecause of this popularity, R decided that it would be a good idea to have a *native* pipe in the language itself, meaning that you don't need to install a package to use it. \nThis is why they introduced the `|>` pipe.\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}