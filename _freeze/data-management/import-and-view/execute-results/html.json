{
  "hash": "b9e15898e6ecb3e7ff5638fbd5e05fbf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Import and view\norder: 1\nsubtitle: How to get your data into R, and how to view it\n---\n\n\n\n\n# Data in a tibble format\n\nIn this tutorial we will use the `tidyverse` package to import a **data set** into R as a `tibble`.\nWe'll start by opening the `tidyverse` package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n\nWith a data set we mean a rectangular data frame consisting of rows and columns (e.g., a spreadsheet in *Excel* or *Numbers*).\nIn general, the rows represent the units in your data (e.g., respondents, participants, documents) and the columns represent the variables (e.g., age, gender).\nIn R this type of data is called a `data.frame`, but the tidyverse has its own version of data frames called `tibble` (a \"tidy table\"), which makes it easier to work with. \n\nAs a simply example, the following code creates a tibble containing respondents, their gender, and their height:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(resp = c(1,2,3), \n       gender = c(\"M\",\"M\",\"F\"), \n       height = c(176, 165, 172))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n   resp gender height\n  <dbl> <chr>   <dbl>\n1     1 M         176\n2     2 M         165\n3     3 F         172\n```\n\n\n:::\n:::\n\n\n\n\n## Reading data: read_csv\n\nThe example above manually created a data set, but in most cases you will start with data that you get from elsewhere,\nsuch as a csv file (e.g. downloaded from an online dataset or exported from excel) or an SPSS or Stata data file.\n\nTidyverse contains a function `read_csv` that allows you to read a csv file directly into a data frame.\nYou specify the location of the file, either on your local drive or directly from the Internet!\n\nThe example below downloads an overview of gun polls from the [data analytics site 538](https://fivethirtyeight.com/),\nand reads it into a tibble using the read_csv function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://raw.githubusercontent.com/fivethirtyeight/data/master/poll-quiz-guns/guns-polls.csv\"\nd <- read_csv(url)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 57 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): Question, Start, End, Pollster, Population, URL\ndbl (3): Support, Republican Support, Democratic Support\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 57 × 9\n   Question     Start   End     Pollster Population Support `Republican Support`\n   <chr>        <chr>   <chr>   <chr>    <chr>        <dbl>                <dbl>\n 1 age-21       2/20/18 2/23/18 CNN/SSRS Registere…      72                   61\n 2 age-21       2/27/18 2/28/18 NPR/Ips… Adults          82                   72\n 3 age-21       3/1/18  3/4/18  Rasmuss… Adults          67                   59\n 4 age-21       2/22/18 2/26/18 Harris … Registere…      84                   77\n 5 age-21       3/3/18  3/5/18  Quinnip… Registere…      78                   63\n 6 age-21       3/4/18  3/6/18  YouGov   Registere…      72                   65\n 7 age-21       3/1/18  3/5/18  Morning… Registere…      76                   72\n 8 arm-teachers 2/23/18 2/25/18 YouGov/… Registere…      41                   69\n 9 arm-teachers 2/20/18 2/23/18 CBS News Adults          44                   68\n10 arm-teachers 2/27/18 2/28/18 Rasmuss… Adults          43                   71\n# ℹ 47 more rows\n# ℹ 2 more variables: `Democratic Support` <dbl>, URL <chr>\n```\n\n\n:::\n:::\n\n\n\n\n(Note that you can safely ignore the (red) message, they simply tell you how each column was parsed)\n\nThe shows the first ten rows of the data set, and if the columns don't fit they are not printed. The remaining rows and columns are printed at the bottom. For each column the data type is also mentioned (<int> stands for integer, which is a *numeric* value; <chr> is textual or *character* data). If you want to browse through your data, you can also click on the name of the data.frame (d) in the top-right window \"Environment\" tab \nor call `View(d)`. \n\n\n# Convert data.frame to tibble\n\nSometimes you already have a data.frame in R, and you just want to convert it to a tibble.\nFor this you can use the `as_tibble` function.\n\nFor example, R comes with several built-in data.frames, that are usefull if you want to quickly test something. \nOne of these is the `iris` data set, which contains measurements of flowers.\nIf you want to convert this to a tibble, you can use the `as_tibble` function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_tibble(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## The iris dataset {#iris}\n\nWe'll be using this `iris` dataset in some of the next tutorials, so let's see what data it contains. \nFrom the previous output we see that there are five columns:\n\n- `Sepal.Length`: the length of the sepal (the green leaf-like part of the flower)\n- `Sepal.Width`: the width of the sepal\n- `Petal.Length`: the length of the petal (the colored part of the flower)\n- `Petal.Width`: the width of the petal\n- `Species`: the species of the flower\n\nThe data has 150 rows, so it contains measurements of 150 flowers.\nThe sepal and petal columns are numeric, and measured in centimeters.\nThe species column is a factor with three levels: `setosa`, `versicolor`, and `virginica`.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}