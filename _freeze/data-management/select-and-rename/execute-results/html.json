{
  "hash": "482b00e8fa7bcd172384d0cd1da8cdb5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Select and rename'\norder: 1\n---\n\n\n\n\n\n::: {.callout-note title=\"Required packages and data for this tutorial\"}\n\nIn this tutorial we use the `tidyverse` package and the simulated [practice data](../../data-management/index.qmd#practice-data).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nd <- read_csv(\"https://tinyurl.com/R-practice-data\")\n```\n:::\n\n\n\n\n:::\n\n# Selecting columns with `select`\n\nOften you do not need to use all columns in your data, or you only need a subset of the columns for a specific analysis.\nYou can do this with the `select` function.\n\nFirst, let's see what columns are in our data using the `colnames` function, which returns the column names of a data frame:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"id\"                    \"age\"                   \"political_orientation\"\n [4] \"political_interest\"    \"np_subscription\"       \"news consumption\"     \n [7] \"experiment_group\"      \"trust_t1\"              \"trust_t2\"             \n[10] \"trust_t1_item1\"        \"trust_t1_item2\"        \"trust_t1_item3\"       \n[13] \"trust_t1_item4\"        \"trust_t1_item5\"        \"trust_t2_item1\"       \n[16] \"trust_t2_item2\"        \"trust_t2_item3\"        \"trust_t2_item4\"       \n[19] \"trust_t2_item5\"       \n```\n\n\n:::\n:::\n\n\n\n\n\n### Selecting specific columns\n\nThe simplest way of using `select` is to explicitly specify the columns you want to keep.\nThe first argument is the tibble (data frame) you want to select from, and the following arguments are the columns you want to keep.\nThe following code returns a new tibble with only the columns `id`, `age`, and `np_subscription`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(d, id, age, np_subscription)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 600 × 3\n      id   age np_subscription\n   <dbl> <dbl> <chr>          \n 1     1    52 yes            \n 2     2    49 yes            \n 3     3    44 yes            \n 4     4    34 no             \n 5     5    28 no             \n 6     6    58 yes            \n 7     7    32 yes            \n 8     8    57 yes            \n 9     9    36 yes            \n10    10    29 no             \n# ℹ 590 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\nAs with any output, you can assign it to a variable to store the result.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds <- select(d, id, age, np_subscription)\n```\n:::\n\n\n\n\n\nHere we create a new tibble `ds` that only contains the columns `id`, `age`, and `np_subscription`.\nWhenever you import data into R, it is often a good idea to first select only the columns you need.\nWhile you could also overwrite the original tibble (`d <- select(d, ...)`) it is usually better to create a new tibble.\nThere is no harm in having multiple tibbles in your environment, and if you give clear names to your tibbles, it will make your code more readable.\n\n### Selecting a range of columns\n\nYou can also specify a range of columns using the syntax `first_column:last_column`.\nFor example, to select all columns from `experiment_group` to `trust_t2`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(d, experiment_group:trust_t2)\n```\n:::\n\n\n\n\n\nThis will return a new tibble with only the columns `experiment_group`, `trust_t1`, and `trust_t2`.\n\nNote that here we did not assign the result to anything.\nSo in this case R will just print the result to the console, but not store it in a variable.\n\n### Selecting and renaming columns\n\nWhen you select a column, you can also rename it using the syntax `new_name = old_name`. \nThe following code selects the columns `experiment_group`, `trust_t1`, and `trust_t2`, and renames them to `group`, `trust_before`, and `trust_after`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(d, group = experiment_group, \n          trust_before = trust_t1, \n          trust_after = trust_t2)\n```\n:::\n\n\n\n\n\n\n### Selecting columns that have spaces in the name  \n\nSometimes columns names have spaces in them.\nThis is a bit annoying to work with in R, because you need to then tell R where a name starts and ends.\nYou can do this by using backticks (reverse quotes) around the column name. \nIn our practice data, we need this to select the `news consumption` column.\nIt is then often smart to immediately rename the column to something without spaces, such as just replacing them with underscores:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(d, news_consumption = `news consumption`)\n```\n:::\n\n\n\n\n\n### Dropping columns\n\nInstead of selecting which column to keep, you can also specify which columns to drop.\nYou can do this by adding a minus sign in front of the column name.\nThe following code drops the columns `np_subscription` and `trust_t1`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(d, -np_subscription, -trust_t1)\n```\n:::\n\n\n\n\n\nThis will return a new tibble with all columns except `np_subscription` and `trust_t1`.\n\n\n# Renaming columns with `rename`\n\nSometimes you only want to rename columns without selecting or dropping any.\nYou can do this with the `rename` function, which works similarly to how you rename columns with `select`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrename(d, group = experiment_group, \n          trust_before = trust_t1, \n          trust_after = trust_t2)\n```\n:::\n\n\n\n\n\nIn this case, we do rename the columns, but without dropping all the other columns.\n",
    "supporting": [
      "select-and-rename_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}