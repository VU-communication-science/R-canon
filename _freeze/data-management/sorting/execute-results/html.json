{
  "hash": "d597a2496601835606deeb2f958c73fd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Ordering rows'\norder: 3\n---\n\n\n\n\n\nOpen the tidyverse package, and read the data from the URL.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nurl <- \"https://raw.githubusercontent.com/fivethirtyeight/data/master/poll-quiz-guns/guns-polls.csv\"\nd <- read_csv(url)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 57 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): Question, Start, End, Pollster, Population, URL\ndbl (3): Support, Republican Support, Democratic Support\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Sorting with arrange()\n\nYou can easily sort a data set with `arrange`: you first specify the data, and then the column(s) to sort on.\nTo sort in descending order, put a minus in front of a variable.\nFor example, the following orders by population and then by support (descending):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- arrange(d, Population, -Support)\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 57 × 9\n   Question         Start End   Pollster Population Support `Republican Support`\n   <chr>            <chr> <chr> <chr>    <chr>        <dbl>                <dbl>\n 1 background-chec… 2/27… 2/28… NPR/Ips… Adults          94                   89\n 2 mental-health-o… 2/27… 2/28… NPR/Ips… Adults          92                   88\n 3 age-21           2/27… 2/28… NPR/Ips… Adults          82                   72\n 4 background-chec… 2/20… 2/23… CBS News Adults          75                   66\n 5 stricter-gun-la… 2/27… 2/28… NPR/Ips… Adults          75                   59\n 6 ban-high-capaci… 2/27… 2/28… NPR/Ips… Adults          73                   59\n 7 ban-assault-wea… 2/27… 2/28… NPR/Ips… Adults          72                   58\n 8 age-21           3/1/… 3/4/… Rasmuss… Adults          67                   59\n 9 stricter-gun-la… 2/20… 2/23… CBS News Adults          65                   43\n10 ban-assault-wea… 2/20… 2/23… CBS News Adults          53                   39\n# ℹ 47 more rows\n# ℹ 2 more variables: `Democratic Support` <dbl>, URL <chr>\n```\n\n\n:::\n:::\n\n\n\n\nNote that we assigned the result of arranging to the `d` object again, i.e. we replace the object by its sorted version. \nIf we wouldn't assign it to anything, it would display it on screen but not remember the sorting.\nAssigning a result to the same name means I don't create a new object, preventing the environment from being cluttered\n(and saving me from the bother of thinking up yet another object name).\nFor sorting, this should generally be fine as the sorted data should contain the same data as before.\nFor subsetting, this means that the rows or columns are actually deleted from the dataset (in memory),\nso you will have to read the file again (or start from an earlier object) if you need those rows or columns later. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}