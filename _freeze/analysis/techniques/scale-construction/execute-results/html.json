{
  "hash": "662d343e10a2d3a2f57d7cbeb93ba1fd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Scale construction\nsubtitle: How to create and validate scales\norder: 2\n---\n\n\n\n\n\n# What is a scale?\n\nA scale is a composite measure that combines multiple items into a single score.\nFor example, in order to measure the complex construct \"happiness\", you could ask people multiple questions related to happiness, such as \"How often do you feel happy?\", \"How satisfied are you with your life?\", and \"How often do you feel joy?\".\n\nThe idea is that by combining multiple items into a single score, you can get a more reliable and valid measure of the underlying construct.\nIf we would just ask people the single question \"How happy are you?\", we might not get a very accurate measure of their happiness, because happiness is a complex and multi-faceted construct.\nBy breaking it down into a multi-item scale, we can get a more nuanced and accurate measure.\n\nIf you've ever taken a survey, you've probably encountered scales before.\nFor example, you might have been asked to rate your agreement with a series of statements on a scale from 1 to 5, where 1 means \"strongly disagree\" and 5 means \"strongly agree\".\nThis is also called a **Likert scale**, and it's a common way to gather data on multiple items, with the goal of combining them into a single score for a complex construct.\n\nYou will also hear scales referred to as **latent variables**.\nThe word **latent** means hidden or concealed, and it refers here to the fact that the construct we are trying to measure is not directly observable.\nWe can only measure it properly by looking at multiple observable indicators (items) that are related to the construct.\n\n## How to create a scale {#create-scale}\n\nTo create a scale, we combine multiple columns in your data (i.e. the variables for the scale items) into a single score.\nFor instance, by taking the average of the values in these columns.\nHowever, before we can do that, we need to make sure that the scale is reliable and valid.\nThis requires a few steps:\n\n### 1. Choose the items based on theory\n\nFirst, you need to think carefully about which items to include in your scale, and this needs to be grounded in theory.\nThere might also already be existing scales that you can use.\n\nFor example, in our [practice data](../../data-management/index#practice-data) we have a construct called \"trust in journalism\", which we measure with five items, based on the items proposed by @stromback20. Participants were asked to rate their agreement with the following items on a scale from 1 to 10:\n\n1. Journalists are fair when covering the news\n2. Journalists are unbiased when covering the news\n3. Journalists do not tell the whole story when covering the news\n4. Journalists are accurate when covering the news\n5. Journalists separate facts from opinion when covering the news\n\nNote that **item 3 is inversed**, so that higher values indicate lower trust.\nKeep this in mind, because to create the scale we \n\n### 2. Inspect your data\n\nOnce you have collected your data, always check whether everything is in order. \nIn the [Inspect and clean](./data-cleaning.qmd) chapter we looked at how to do this.\nHere we just use the `dfSummary` function from the `summarytools` package to get a quick overview of our data.\n\nFirst though, let's load our data and select the columns that we're interested in. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nd = read_csv('https://tinyurl.com/R-practice-data')\n```\n:::\n\n\n\n\nIn the practice data we have two scales: `trust_t1` and `trust_t2`, with each having five items (`trust_t1_item1` to `trust_t1_item5` and `trust_t2_item1` to `trust_t2_item5`).\nFor this tutorial we'll just focus on `trust_t1`.\nThe following code selects the five items for `trust_t1`, and then uses the `dfSummary` function to get a summary of these columns.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(summarytools)\n\nd |> \n    select(trust_t1_item1:trust_t1_item5) |> \n    dfSummary() |>\n    view()\n```\n:::\n\n\n\n\nThis looks good. \nThere are no missing values, all values are within the expected range (1-10), and the distributions look reasonable.\n\n### 3. Look at the correlations\n\nThe idea behind a scale is that the items are related to each other, because they all measure the same underlying construct.\nA good way to check this is by looking at the correlations between the items.\n\nFor this we'll be using the `sjPlot` package, which has a function `tab_corr` (tabulate correlations) that creates a nice table with the correlations between all columns in a data frame. \nWe again use this on the five items for `trust_t1`.\nIn `tab_corr` we also set `p.numeric=TRUE` to show the p-values for the correlations as numbers (instead of stars).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sjPlot)\nd |> \n    select(trust_t1_item1:trust_t1_item5) |> \n    tab_corr(p.numeric=TRUE)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table style=\"border-collapse:collapse; border:none;\">\n<tr>\n<th style=\"font-style:italic; font-weight:normal; border-top:double black; border-bottom:1px solid black; padding:0.2cm;\">&nbsp;</th>\n<th style=\"font-style:italic; font-weight:normal; border-top:double black; border-bottom:1px solid black; padding:0.2cm;\">trust_t1_item1</th>\n<th style=\"font-style:italic; font-weight:normal; border-top:double black; border-bottom:1px solid black; padding:0.2cm;\">trust_t1_item2</th>\n<th style=\"font-style:italic; font-weight:normal; border-top:double black; border-bottom:1px solid black; padding:0.2cm;\">trust_t1_item3</th>\n<th style=\"font-style:italic; font-weight:normal; border-top:double black; border-bottom:1px solid black; padding:0.2cm;\">trust_t1_item4</th>\n<th style=\"font-style:italic; font-weight:normal; border-top:double black; border-bottom:1px solid black; padding:0.2cm;\">trust_t1_item5</th>\n</tr>\n<tr>\n<td style=\"font-style:italic;\">trust_t1_item1</td>\n<td style=\"padding:0.2cm; text-align:center;\">&nbsp;</td>\n<td style=\"padding:0.2cm; text-align:center;\">0.328<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">-0.740<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">0.735<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">0.828<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n</tr>\n<tr>\n<td style=\"font-style:italic;\">trust_t1_item2</td>\n<td style=\"padding:0.2cm; text-align:center;\">0.328<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">&nbsp;</td>\n<td style=\"padding:0.2cm; text-align:center;\">-0.297<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">0.283<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">0.308<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n</tr>\n<tr>\n<td style=\"font-style:italic;\">trust_t1_item3</td>\n<td style=\"padding:0.2cm; text-align:center;\">-0.740<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">-0.297<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">&nbsp;</td>\n<td style=\"padding:0.2cm; text-align:center;\">-0.687<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">-0.781<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n</tr>\n<tr>\n<td style=\"font-style:italic;\">trust_t1_item4</td>\n<td style=\"padding:0.2cm; text-align:center;\">0.735<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">0.283<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">-0.687<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">&nbsp;</td>\n<td style=\"padding:0.2cm; text-align:center;\">0.771<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n</tr>\n<tr>\n<td style=\"font-style:italic;\">trust_t1_item5</td>\n<td style=\"padding:0.2cm; text-align:center;\">0.828<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">0.308<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">-0.781<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">0.771<br><span style=\"font-style:italic;\">(&lt;.001)</span></td>\n<td style=\"padding:0.2cm; text-align:center;\">&nbsp;</td>\n</tr>\n<tr>\n<td colspan=\"6\" style=\"border-bottom:double black; border-top:1px solid black; font-style:italic; font-size:0.9em; text-align:right;\">Computed correlation used pearson-method with listwise-deletion.</td>\n</tr>\n \n</table>\n`````\n:::\n:::\n\n\n\n\nHere we see that the correlations between the items is mostly quite strong, and all significant at the 0.001 level.\nThe only notable exception in terms of strength is that the correlations of `item2` to the other items is much lower.\nThis suggests that our items indeed measure are common underlying construct, but `item2` (about *bias*) might measure a somewhat different aspect of trust in journalism.\n\nOne **very important thing** to notice is that the correlation of `trust_t1_item3` with the other items is **negative**! \nSo when the score on `trust_t1_item3` goes up, the scores on the other items tend to go down.\nThis makes complete sense if we remember that `trust_t1_item3` is inversed, so that higher values indicate lower trust.\n\n\n::: {.callout-note title=\"Factor analysis\" collapse=\"true\"}\n\nAnother common way to check whether the items in your scale are related is by using **factor analysis**.\nThis is a statistical technique that can help you identify the underlying factors that explain the correlations between the items.\nWe'll cover factor analysis in a later tutorial.\n\n:::\n\n### 4. Invert items if necessary\n\nIn the correlation analysis we saw that the third item (`trust_t1_item3`) is negatively correlated with the other items.\nThis is all according to plan, since we inversed the scale for this item.\nBut to create a single construct, we need to make sure that all items have the same directionality.\nSo we need to invert the values for `trust_t1_item3`. \n\nSince we have a scale from 1 to 10, we can inverse the value by subtracking it from `11` (11 - 1 = 10, 11 - 2 = 9, ..., 11 - 10 = 1).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- d |> \n    mutate(trust_t1_item3_inv = 11 - trust_t1_item3)\n```\n:::\n\n\n\n\nNotice that we **do not** overwrite the original column, but create a new column `trust_t1_item3_inv` (inversed). \nOverwriting the original column is possible, but dangerous and not transparent. \nCreating a new column prevents you from accidentally running the inversion multiple times, and messing up your analysis.\n\n::: {.callout-note title=\"General formula for inversing\" collapse=\"true\"}\n\nSince we had a scale from 1 to 10, we could invert the values by subtracting from 11.\nSimilarly, if you have a scale from 1 to 7, you could invert the values by subtracting from 8.\nSo for any scale starting from 1, the formula you can use is:\n\n$$ \\text{new value} = \\text{max value} + 1 - \\text{old value} $$\n\nHowever, if your scale does not start from 1, this doesn't work!\n(try it out for a scale from 0 to 10, and you'll see why).\nThe more general formula therefore is:\n\n$$ \\text{new value} = \\text{max value} + \\text{min value} - \\text{old value} $$\n\nNote that in this case you need to use the minimum and maximum **possible** values of your scale, and NOT the actual minimum and maximum values in your data!\nSo if your scale goes from 1 to 7, you would use 1 and 7 in the formula, even if the minimum and maximum values in your data are 1.5 and 6.5.\n\n:::\n\n### 5. Calculate the reliability\n\nThe reliability of a scale is a measure of how consistent the items in the scale are.\nThere are different ways to calculate reliability, but one of the most common is **Cronbach's alpha**.\n\nCronbach's alpha ranges from 0 to 1, where higher values indicate higher reliability.\nA common rule of thumb is that a value of 0.7 or higher is acceptable, but this can vary depending on the context.\nAs with any *rule of thumb*, don't blindly follow it, but think about what makes sense in your specific situation.\n\nTo calculate Cronbach's alpha, we can use the `psych` package, which has a function `alpha` that calculates the alpha for the columns on an input data frame.\nSo we'll do the same thing as above, but note that this time our select statement looks different, because we need to include the inversed item.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(psych)\n\nd |> \n    select(trust_t1_item1,  \n           trust_t1_item2, \n           trust_t1_item3_inv, \n           trust_t1_item4, \n           trust_t1_item5) |> \n    alpha()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nReliability analysis   \nCall: alpha(x = select(d, trust_t1_item1, trust_t1_item2, trust_t1_item3_inv, \n    trust_t1_item4, trust_t1_item5))\n\n  raw_alpha std.alpha G6(smc) average_r S/N    ase mean sd median_r\n      0.86      0.87    0.87      0.58 6.8 0.0096  3.9  1     0.71\n\n    95% confidence boundaries \n         lower alpha upper\nFeldt     0.84  0.86  0.88\nDuhachek  0.84  0.86  0.88\n\n Reliability if an item is dropped:\n                   raw_alpha std.alpha G6(smc) average_r  S/N alpha se  var.r\ntrust_t1_item1          0.80      0.81    0.81      0.52  4.4    0.014 0.0620\ntrust_t1_item2          0.92      0.93    0.91      0.76 12.5    0.005 0.0023\ntrust_t1_item3_inv      0.81      0.83    0.83      0.54  4.7    0.014 0.0678\ntrust_t1_item4          0.81      0.83    0.83      0.55  4.8    0.013 0.0677\ntrust_t1_item5          0.79      0.81    0.80      0.51  4.2    0.015 0.0530\n                   med.r\ntrust_t1_item1      0.50\ntrust_t1_item2      0.76\ntrust_t1_item3_inv  0.53\ntrust_t1_item4      0.53\ntrust_t1_item5      0.51\n\n Item statistics \n                     n raw.r std.r r.cor r.drop mean  sd\ntrust_t1_item1     600  0.88  0.89  0.88   0.81  4.1 1.2\ntrust_t1_item2     600  0.58  0.55  0.35   0.34  2.7 1.5\ntrust_t1_item3_inv 600  0.86  0.86  0.83   0.76  4.3 1.3\ntrust_t1_item4     600  0.84  0.86  0.82   0.75  3.7 1.1\ntrust_t1_item5     600  0.90  0.91  0.91   0.83  4.6 1.3\n\nNon missing response frequency for each item\n                      1    2    3    4    5    6    7    8 9 miss\ntrust_t1_item1     0.00 0.08 0.22 0.34 0.24 0.10 0.02 0.00 0    0\ntrust_t1_item2     0.27 0.22 0.24 0.16 0.07 0.04 0.01 0.00 0    0\ntrust_t1_item3_inv 0.01 0.06 0.20 0.30 0.26 0.14 0.03 0.01 0    0\ntrust_t1_item4     0.02 0.12 0.31 0.34 0.17 0.04 0.00 0.00 0    0\ntrust_t1_item5     0.01 0.03 0.16 0.25 0.29 0.21 0.05 0.00 0    0\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-note title=\"Cronbach's alpha with 3 digits\" collapse=\"true\"}\n\nBy default, `alpha` only shows two digits for Cronbach's alpha.\nIf you want to see more digits, you can use the `print` function with the `digits` argument.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd |> \n    select(trust_t1_item1, trust_t1_item2, trust_t1_item3_inv, trust_t1_item4, trust_t1_item5) |> \n    alpha() |>\n    print(digits=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nReliability analysis   \nCall: alpha(x = select(d, trust_t1_item1, trust_t1_item2, trust_t1_item3_inv, \n    trust_t1_item4, trust_t1_item5))\n\n  raw_alpha std.alpha G6(smc) average_r  S/N     ase mean   sd median_r\n     0.859     0.872   0.873     0.576 6.79 0.00964 3.88 1.01    0.711\n\n    95% confidence boundaries \n         lower alpha upper\nFeldt     0.84 0.859 0.876\nDuhachek  0.84 0.859 0.878\n\n Reliability if an item is dropped:\n                   raw_alpha std.alpha G6(smc) average_r   S/N alpha se  var.r\ntrust_t1_item1         0.797     0.813   0.811     0.521  4.35  0.01434 0.0620\ntrust_t1_item2         0.924     0.926   0.907     0.757 12.47  0.00498 0.0023\ntrust_t1_item3_inv     0.806     0.826   0.828     0.542  4.74  0.01395 0.0678\ntrust_t1_item4         0.814     0.828   0.831     0.547  4.83  0.01332 0.0677\ntrust_t1_item5         0.789     0.807   0.798     0.512  4.19  0.01490 0.0530\n                   med.r\ntrust_t1_item1     0.497\ntrust_t1_item2     0.756\ntrust_t1_item3_inv 0.532\ntrust_t1_item4     0.534\ntrust_t1_item5     0.508\n\n Item statistics \n                     n raw.r std.r r.cor r.drop mean   sd\ntrust_t1_item1     600 0.883 0.894 0.884  0.812 4.10 1.16\ntrust_t1_item2     600 0.579 0.545 0.351  0.336 2.70 1.46\ntrust_t1_item3_inv 600 0.859 0.862 0.830  0.761 4.32 1.30\ntrust_t1_item4     600 0.839 0.855 0.819  0.752 3.67 1.11\ntrust_t1_item5     600 0.899 0.907 0.913  0.829 4.63 1.25\n\nNon missing response frequency for each item\n                       1     2     3     4     5     6     7     8     9 miss\ntrust_t1_item1     0.003 0.077 0.222 0.343 0.242 0.095 0.017 0.002 0.000    0\ntrust_t1_item2     0.268 0.217 0.237 0.158 0.073 0.040 0.007 0.000 0.000    0\ntrust_t1_item3_inv 0.010 0.062 0.195 0.298 0.257 0.138 0.028 0.010 0.002    0\ntrust_t1_item4     0.020 0.115 0.307 0.345 0.168 0.040 0.003 0.002 0.000    0\ntrust_t1_item5     0.007 0.027 0.165 0.252 0.292 0.207 0.047 0.003 0.002    0\n```\n\n\n:::\n:::\n\n\n\n\nNote that this way of setting the nr of digits is specific to the `psych` package.\n\n:::\n\nThis gives quite a lot of output. These are the most important parts to consider:\n\n1. **Cronbach's alpha**: At the top we have a row that says `raw_alpha`, `std.alpha`, etc. Here we are just interested in the `raw_alpha`, which is the value of Cronbach's alpha. In this case it's 0.85, which is already very good. \n2. **Reliability if an item is dropped**: This part shows you what would happen to the `raw_alpha` (and the other reliability measures) if you would drop one of the items from the scale. In our data we see that if `item2` would be dropped, the `raw_alpha` would go up to `0.92` (from 0.85). In other words, if we would use a 4-item scale with `item2` dropped, the scale would be more reliable.  \n3. **Item statistics**: This part shows you some usefull statistics about the items, like the mean and standard deviation (sd). More importantly, it also shows several scores for `item-total correlation` (the `r` in `raw.r`, `std.r`, `r.cor` and `r.drop` stands for correlation). This indicate how strongly the item is correlated to the total scale (i.e. the combination of the other items). The recommended correlation measure to look at is the `r.cor` (correlation corrected for item overlap). In our data we see that `item5` has the strongest correlation with the total scale, whereas `item2` has the weakets. Notice how this is in line with the `Reliability if an item is dropped` part: if we would drop `item2`, the scale would become more reliable. (Think about why that makes sense!)\n\n### 6. Remove items if necessary\n\nIf the reliability of your scale is too low, you might want to consider removing some items (if you have enough items to spare).\nAbove we saw that if we would drop `item2`, the reliability of the scale would go up to 0.92.\nYou can verify that this is indeed what happens:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd |> \n    select(trust_t1_item1, \n           trust_t1_item3_inv, \n           trust_t1_item4, \n           trust_t1_item5) |> \n    alpha()\n```\n:::\n\n\n\n\nYou can verify that the `raw_alpha` is now 0.92.\nSo now we can choose between either using the 4-item scale with an alpha of 0.92, or keeping the 5-item scale with an alpha of 0.85.\nThis is a judgement call, and depends on the context of your research.\nGenerally speaking, if you have sufficient items left and the improvement in the alpha is not very small, it's a good idea to remove items to increase the reliability.\n\nIf you decide to remove an item, you should test the scale again, because it is possible that you could further improve the reliability by removing another item.\nIn the output of `alpha()` for our four item scale we see that this is not the case.\n\n### 7. Calculate the scale score\n\nFinally, once you have a reliable scale, you can calculate the scale score.\nThis is usually done by taking the average of the items in the scale.\nThe simplest way to do so is to just add up the items and divide by the number of items.\nLet's do this for the 4-item scale ($\\alpha = 0.92$) that we tested above (mind the parentheses!):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- d |> \n    mutate(trust_t1_scale = (trust_t1_item1 + trust_t1_item3_inv + trust_t1_item4 + trust_t1_item5) / 4)\n```\n:::\n\n\n\n\nSo now we have a new column `trust_t1_scale` that contains the scale score.\n\nRemember that in the practice data we already had a column `trust_t1` for the scale.\nThis is how that column was created.\nYou can verify this by correlating the new scale with the old one.\nIf you did everything correctly, the correlation should be 1.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor.test(d$trust_t1, d$trust_t1_scale)\n```\n:::\n",
    "supporting": [
      "scale-construction_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}