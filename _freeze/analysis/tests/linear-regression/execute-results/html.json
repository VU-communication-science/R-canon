{
  "hash": "269437ac8e4b724593964cd6fc550192",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Simple linear regression\nsubtitle: \"Predicting one variable from another\"\n---\n\n\n\n\n\n# What is regression analysis?\n\nIn the tutorial on [correlation](../tests/correlation.qmd) we learned how to test if there is a relationship between two numeric variables.\nWe saw that the correlation does not have a direction, and that it only tells us if there is a relationship between the variables, and how strong it is.\nWith simple linear regression we can take this one step further, and try to *predict* the value of one variable based on the value of another variable.\n\nIn this context, the term *predict* is used in a statistical sense.\nIt refers to estimating how well one can infer the value of one variable given knowledge of another. \nWe are often not actually interested in the prediction itself!\nInstead, we are interested in the relationship between the variables, and what this relationship can tell us about the world. \nIf one variable can predict another, it may for instance suggest a causal relationship.\n\nFor example, imagine that you want to be able to predict for a random person how much trust they have in journalists.\nWhat information would you use to make this prediction?\n\nYou could perhaps use their age \nRegression analysis allows you to find a mathematical formula that predicts trust based on a combination of these variables.\nThis can help you understand complex relationships between two or more variables.\n\n<!-- We refer to the variable that we want to predict (trust) as the **dependent variable**, and the variables that we use to make the prediction (age) as the **independent variables**. -->\n<!-- In the current tutorial you will first learn about simple linear regression, where we use one independent variable to predict the dependent variable.\nAs you progress, you will learn about [multiple regression](../tests/multiple-regression.qmd), where we use more than one independent variable at once. -->\n\n\n# How to use it\n\nFor this tutorial we'll be using our standard practice data, and a bit of `tidyverse` to load and clean the data.\nWe'll also be using the `sjPlot` package, which can create nice tables and plots of regression models.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sjPlot)\n\nd <- read_csv(\"https://tinyurl.com/R-practice-data\") |>\n        mutate(age = if_else(age > 100, 2024 - age, age)) |>\n        rename(news_consumption = `news consumption`)\n\nd\n```\n:::\n\n\n\n\n\nThe **dependent** variable in the regression model has to be numeric.\nFor our examples we'll use the `trust_t1` variable, which measures a person's trust in journalists on a scale from 1 to 10. \nA regression model can have **one or multiple independent** variables, which can be numeric or categorical.\nThis makes regression analysis a very flexible tool that can be used in many different situations.\n\n## Regression with numerical independent variable\n\nLet's start with the example of predicting `trust` in journalists based on `age`.\nFor this we'll be using the `trust_t1`[^1] variable as the dependent variable, and the `age` variable as the independent variable.\nWe'll use the `lm()` function to run the regression, and the `tab_model()` function from the `sjPlot` package to show the results in a nice table.\nInside the `lm()` function we specify the formula for the regression, which has the format `dependent ~ independent` (just like in the t-test and ANOVA).\n\n[^1]: We use the `trust_t1` variable here, because for the current analysis we are not interested in the effect of the experimental group. Since `trust_t1` is measured before the experiment, it is not influenced by the experiment.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- lm(trust_t1 ~ age, data = d) \n\ntab_model(m)\n```\n\n::: {.cell-output-display  html-table-processing=none}\n`````{=html}\n<table style=\"border-collapse:collapse; border:none;\">\n<tr>\n<th style=\"border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm;  text-align:left; \">&nbsp;</th>\n<th colspan=\"3\" style=\"border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm; \">trust_t1</th>\n</tr>\n<tr>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  text-align:left; \">Predictors</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">Estimates</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">CI</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">p</td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; \">(Intercept)</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">2.21</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">1.99&nbsp;&ndash;&nbsp;2.43</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \"><strong>&lt;0.001</strong></td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; \">age</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">0.04</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">0.04&nbsp;&ndash;&nbsp;0.05</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \"><strong>&lt;0.001</strong></td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm; border-top:1px solid;\">Observations</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left; border-top:1px solid;\" colspan=\"3\">595</td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm;\">R<sup>2</sup> / R<sup>2</sup> adjusted</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left;\" colspan=\"3\">0.292 / 0.291</td>\n</tr>\n\n</table>\n\n`````\n:::\n:::\n\n\n\n\n\nThe output of the regression analysis gives us values for two **predictors**: the **(intercept)** and the **age** variable.\nThe **(intercept)** tells us what the average value of the dependent variable (`trust_t1`) is when the independent variable (`age`) is zero.\nThe **age** predictor tells us how much the dependent variable (`trust_t1`) changes for every unit increase in age. \nFor each of these predictors we **estimate**, a **confidence interval**, and a **p-value**.\n\nThis could already be all the information we need!\nIf our hypothesis was that trust in journalists increases with age, we could now report that this hypothesis is supported by the data (b = 0.04, p < 0.001).\nBut let's not stop there, and see how we can interpret these results in more detail!\n\n### Interpreting the intercept and the effect of age \n\nSo why do we get two predictors, when we only specified one variable?\nWhy do we need the intercept?\nThis is because our prediction of `trust_t1` is based on two pieces of information:\n\n* What is the average trust in journalists regardless of age?\n* How does trust in journalists change as people get older?\n\nThe **intercept** (2.21) tells us the average value of the dependent variable when age is zero.[^2]\nThe coefficient for the **age** variable (0.04) tells us how much this trust increases for every year of age.\nTogether, these values allow us to predict the trust in journalists for any age, using the following formula:\n\n[^2]: Often, the intercept doesn't have a meaningful interpretation, because the independent variable can't be zero. For example, there are no people with age zero in our data. We therefore often do not interpret the intercept by itself, but we still need it to make the model work.\n\n$$ trust\\_t1 = intercept + slope_{age} \\times age $$\n\nIf we plug in the values from our model, we get: \n\n$$ trust\\_t1 = 2.21 + 0.04 \\times age $$\n\nWe can for instance calculate the predicted trust in journalists for a 20 year old:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2.21 + 0.04 * 20\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.01\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Visualizing the intercept and slope\n\nWe can also visualize how the predicted trust in journalists changes with age.\nThe `sjPlot` package has a function `plot_model()` that can do this for us.\nHere we visualize the prediction (`type = \"pred\"`) for the `age` variable (`terms = \"age\"`). \nTo show you how the prediction relates to the actual data, we'll also include a scatterplot of the data points (`show.data = T`), and add a bit of jitter[^3] to the data points so they don't overlap (`jitter = T`)\n\n[^3]: Jitter is a visualization technique that randomly moves the data points a bit, so that they don't overlap. If we don't do this, then data points with identical values are plotted on top of each other, and we can't see how many data points there are.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_model(m, type = \"pred\", terms = \"age\", show.data = T, jitter=T)\n```\n\n::: {.cell-output-display}\n![](linear-regression_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\nHere the *regression line* shows the predicted values. \nYou can check that at age 20 the predicted trust is indeed 3.01, as we calculated before. \nWe can now see very clearly how average trust in journalists increases with age!\n\nThis should also clarify why the effect of age is called a **slope**.\nSince we have a positive effect, the regression line slopes upwards as age increases.\nThe stronger the effect, the steeper the slope.\nIf there was no effect of age, the regression line would be flat (i.e. no slope), because the predicted value would not change with age. \nIf the effect was negative, the regression line would slope downwards.\nNote that this is identical to the **direction** and **strength** of [covariance and correlation measures](../concepts/covariance-and-correlation.qmd#visualizing-correlation).\n\n\n::: {.callout-note title=\"How intercept and slope make the regression line\" collapse=\"true\"}\n\nThe **intercept** is the value of the dependent variable when the independent variable is zero, which determines at what value the regression line crosses the y-axis.\nThe coefficient for an independent variable tells us how much the dependent variable changes for every unit increase in the independent variable, which determines the **slope** of the regression line.\nThe regression model finds the values for the intercept and slope that draws a line through the data points that best fits the data.\nTo get a feel for this, try changing the values of the intercept and slope in the interactive widget below, and see how the regression line changes.\n\n\n\n\n\n```{ojs}\n//| echo: false\nviewof intercept = Inputs.range(\n  [-10, 10], \n  {value: -5, step: 0.01, label: \"Intercept\"}\n)\nviewof slope = Inputs.range(\n  [-2,2], \n  {value: 0.1, step: 0.01, label: \"Slope\"}\n)\n```\n\n```{ojs}\n//| echo: false\n\nx_values = Array.from({ length: 100 }, (_, i) => i);\ny_values = x_values.map(x => slope * x + intercept);\n\n// Now, plot the regression line\nPlot.plot({\n  marks: [\n    Plot.lineY(y_values, {x: x_values}) // Explicitly pass x and y values\n  ],\n  x: {\n    label: \"Independent variable (age)\",\n    domain: [0, 100]\n  },\n  y: {\n    label: \"Dependent variable (trust)\",\n    domain: [-10, 10]\n  },\n  width: 600,\n  height: 400\n})\n\n```\n\n\n\n\n:::\n\n## Regression with categorical independent variable\n\nThe **independent variable** in a regression model can also be categorical.\nThis allows us to include categorical variables in the model, similar to the t-test and ANOVA.\nLet's see what this looks like when we predict `trust_t1` based on the `np_subscription` variable, which has the values `yes` and `no` to indicate if a person has a newspaper subscription.\n\nWe cannot do calculations with the values \"yes\" and \"no\", but we can make this possible by creating a so-called **dummy variable**.\nIn a dummy variable, we assign a value of `1` to one of the categories, and `0` to the other categories.\nIn our case we'll assign `1` to the category `yes`, and `0` to the category `no`.\nR can actually do this for us, but we'll first show you how to do it yourself to understand what's happening.\nHere we create a new variable `has_subscription` that has the value `1` if the person has a subscription, and `0` if they don't.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd = mutate(d, has_subscription = if_else(np_subscription == \"yes\", 1, 0))\n\nselect(d, np_subscription, has_subscription)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 600 × 2\n   np_subscription has_subscription\n   <chr>                      <dbl>\n 1 no                             0\n 2 no                             0\n 3 yes                            1\n 4 yes                            1\n 5 no                             0\n 6 no                             0\n 7 yes                            1\n 8 yes                            1\n 9 yes                            1\n10 no                             0\n# ℹ 590 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\nNow we can use this variable in the regression model.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- lm(trust_t1 ~ has_subscription, data = d)\n\ntab_model(m)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table style=\"border-collapse:collapse; border:none;\">\n<tr>\n<th style=\"border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm;  text-align:left; \">&nbsp;</th>\n<th colspan=\"3\" style=\"border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm; \">trust_t1</th>\n</tr>\n<tr>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  text-align:left; \">Predictors</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">Estimates</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">CI</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">p</td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; \">(Intercept)</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">3.68</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">3.56&nbsp;&ndash;&nbsp;3.80</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \"><strong>&lt;0.001</strong></td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; \">has subscription</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">0.37</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">0.22&nbsp;&ndash;&nbsp;0.53</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \"><strong>&lt;0.001</strong></td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm; border-top:1px solid;\">Observations</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left; border-top:1px solid;\" colspan=\"3\">600</td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm;\">R<sup>2</sup> / R<sup>2</sup> adjusted</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left;\" colspan=\"3\">0.035 / 0.033</td>\n</tr>\n\n</table>\n\n`````\n:::\n:::\n\n\n\n\n\nWe now get a **slope** for the `has_subscription` variable.\nBefore we saw that the slope tells us how much the dependent variable changes for every unit increase in the independent variable.\nThis is still true!\nWe only need to remember that the `has_subscription` variable is binary, so it can only take the values `0` and `1`.\nSo given a coefficient of `0.37`, we can say that people with a subscription have on average a trust score that is `0.37` points higher than people without a subscription.\n\nNow let's do this again, but this time we'll let R create the dummy variable.\nThis time we'll just directly use the `np_subscription` variable in the regression model.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- lm(trust_t1 ~ np_subscription, data = d)\n\ntab_model(m)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table style=\"border-collapse:collapse; border:none;\">\n<tr>\n<th style=\"border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm;  text-align:left; \">&nbsp;</th>\n<th colspan=\"3\" style=\"border-top: double; text-align:center; font-style:normal; font-weight:bold; padding:0.2cm; \">trust_t1</th>\n</tr>\n<tr>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  text-align:left; \">Predictors</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">Estimates</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">CI</td>\n<td style=\" text-align:center; border-bottom:1px solid; font-style:italic; font-weight:normal;  \">p</td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; \">(Intercept)</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">3.68</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">3.56&nbsp;&ndash;&nbsp;3.80</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \"><strong>&lt;0.001</strong></td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; \">np subscription [yes]</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">0.37</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \">0.22&nbsp;&ndash;&nbsp;0.53</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:center;  \"><strong>&lt;0.001</strong></td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm; border-top:1px solid;\">Observations</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left; border-top:1px solid;\" colspan=\"3\">600</td>\n</tr>\n<tr>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; text-align:left; padding-top:0.1cm; padding-bottom:0.1cm;\">R<sup>2</sup> / R<sup>2</sup> adjusted</td>\n<td style=\" padding:0.2cm; text-align:left; vertical-align:top; padding-top:0.1cm; padding-bottom:0.1cm; text-align:left;\" colspan=\"3\">0.035 / 0.033</td>\n</tr>\n\n</table>\n\n`````\n:::\n:::\n\n\n\n\n\nNotice that the results are identical! \nThe only difference is that the label for the `np_subscription` variable is `np_subscription [yes]`.\nThis is R's way of telling us that it created a dummy variable for us in which the value `1` corresponds to the category `yes`.\n\nAn additional benefit of letting R create the dummy variable is that it now knows that the variable is categorical. \nIf we now use the `plot_model()` function to visualize the prediction, it will \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_model(m, type = \"pred\", terms = \"np_subscription\")\n```\n\n::: {.cell-output-display}\n![](linear-regression_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nJust like before, we get an **intercept** and a **slope**.\nThe interpretation is mostly the same, but we need to keep in mind that the np_subscription variable is binary.\n\nNotice that the label for the `np_subscription` variable is `np_subscription [yes]`.\nThis tells us that R ",
    "supporting": [
      "linear-regression_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}