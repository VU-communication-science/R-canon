[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Communication Science R Material",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "pages/functions/data_management/select.html",
    "href": "pages/functions/data_management/select.html",
    "title": "select",
    "section": "",
    "text": "Documentation of the select function"
  },
  {
    "objectID": "pages/functions/0-index.html",
    "href": "pages/functions/0-index.html",
    "title": "Functions",
    "section": "",
    "text": "This is an overview of the functions used in course material. Use this as a reference if you encounter a function that you do not understand."
  },
  {
    "objectID": "pages/functions/data_management/0-index.html",
    "href": "pages/functions/data_management/0-index.html",
    "title": "Data management",
    "section": "",
    "text": "Overview of data management functions"
  },
  {
    "objectID": "pages/getting-started.html",
    "href": "pages/getting-started.html",
    "title": "R basics: Getting started",
    "section": "",
    "text": "R is an open-source statistical software language, that is currently among the most popular languages for data science. In comparison to other popular software packages in social scientific research, such as SPSS and Stata, R has several notable advantages:\n\nR is a programming language, which makes it much more versatile. While R focuses on statistical analysis at heart, it facilitates a wide-range of features, and virtually any tool for data science can be implemented.\nThe range of things you can do with R is constantly being updated. R is open-source, meaning that anyone can contribute to its development. In particular, people can develop new packages, that can easily and safely be installed from within R with a single command. Since many scholars and industry professionals use R, it is likely that any cutting-edge and bleeding-edge techniques that you are interested in are already available. You can think of it as an app-store for all your data-science needs!\nR is free. While for students this is not yet a big deal due to free or cheap student and university licences, this can be a big plus in the commercial sector. Especially for small businesses and free-lancers.\n\nThe tradeoff is that R has a relatively steep learning curve. Still, learning R is not as bad as people often fear, and with thanks to the rising popularity of data science there are now many footholds that make learning and using R easier and–dare we say–fun. In this course you will learn the core basics, and see how this immediately grants you access to using cutting-edge techniques.\n\n\n\nThe focus of this tutorial is to get you started with R, and to see how easy it is to start doing some cool stuff. We will not yet dive into how R and the R syntax really work, so do not be allarmed if you do not understand the code that you’ll be using. For now, just focus on getting R running, getting familiar with how to run code, and playing around with it."
  },
  {
    "objectID": "pages/getting-started.html#what-is-r-and-why-should-you-learn-it",
    "href": "pages/getting-started.html#what-is-r-and-why-should-you-learn-it",
    "title": "R basics: Getting started",
    "section": "",
    "text": "R is an open-source statistical software language, that is currently among the most popular languages for data science. In comparison to other popular software packages in social scientific research, such as SPSS and Stata, R has several notable advantages:\n\nR is a programming language, which makes it much more versatile. While R focuses on statistical analysis at heart, it facilitates a wide-range of features, and virtually any tool for data science can be implemented.\nThe range of things you can do with R is constantly being updated. R is open-source, meaning that anyone can contribute to its development. In particular, people can develop new packages, that can easily and safely be installed from within R with a single command. Since many scholars and industry professionals use R, it is likely that any cutting-edge and bleeding-edge techniques that you are interested in are already available. You can think of it as an app-store for all your data-science needs!\nR is free. While for students this is not yet a big deal due to free or cheap student and university licences, this can be a big plus in the commercial sector. Especially for small businesses and free-lancers.\n\nThe tradeoff is that R has a relatively steep learning curve. Still, learning R is not as bad as people often fear, and with thanks to the rising popularity of data science there are now many footholds that make learning and using R easier and–dare we say–fun. In this course you will learn the core basics, and see how this immediately grants you access to using cutting-edge techniques."
  },
  {
    "objectID": "pages/getting-started.html#purpose-of-this-tutorial",
    "href": "pages/getting-started.html#purpose-of-this-tutorial",
    "title": "R basics: Getting started",
    "section": "",
    "text": "The focus of this tutorial is to get you started with R, and to see how easy it is to start doing some cool stuff. We will not yet dive into how R and the R syntax really work, so do not be allarmed if you do not understand the code that you’ll be using. For now, just focus on getting R running, getting familiar with how to run code, and playing around with it."
  },
  {
    "objectID": "pages/getting-started.html#installing-r",
    "href": "pages/getting-started.html#installing-r",
    "title": "R basics: Getting started",
    "section": "Installing R",
    "text": "Installing R\nTo install R, you can download it from the CRAN (comprehensive R Archive Network) website. Do not be alarmed by the website’s 90’s asthetics. R itself is cold, dry, no-nonsense software. The decorations comes with RStudio."
  },
  {
    "objectID": "pages/getting-started.html#installing-rstudio",
    "href": "pages/getting-started.html#installing-rstudio",
    "title": "R basics: Getting started",
    "section": "Installing RStudio",
    "text": "Installing RStudio\nThe RStudio website contains download links and installing instructions. You will need to install the free RStudio Desktop Open Source License. Note that the expensive licences do not offer better features or anything, but just offer additional support and a commercial licence. You can also use the free version when doing commercial research, but with an AGPL licence."
  },
  {
    "objectID": "pages/getting-started.html#using-rstudio",
    "href": "pages/getting-started.html#using-rstudio",
    "title": "R basics: Getting started",
    "section": "Using RStudio",
    "text": "Using RStudio\nOnce you have installed R and RStudio, you can start by launching RStudio. If everything was installed correctly, RStudio will automatically launch R as well.\nThe first time you open RStudio, you will likely see three separate windows. The first thing you want to do is open an R Script to work in. To do so, go to the toolbar and select File -&gt; New File -&gt; R Script.\nYou will now see four windows split evenly over the four corners of your screen:\n\nIn the top-left you have the text editor for the file that you are working in. This will most of the time be an R script or RMarkdown file.\nIn the top-right you can see the data and values that you are currently working with (environment) or view your history of input.\nIn the bottom-left you have the console, which is where you can enter and run code, and view the output. If you run code from your R script, it will also be executed in this console.\nIn the bottom-right you can browse through files on your computer, view help for functions, or view visualizations.\n\nWhile you can directly enter code into your console (bottom-left), you should always work with R scripts (top-left). This allows you to keep track of what you are doing and save every step."
  },
  {
    "objectID": "pages/getting-started.html#running-code-from-the-r-script",
    "href": "pages/getting-started.html#running-code-from-the-r-script",
    "title": "R basics: Getting started",
    "section": "Running code from the R script",
    "text": "Running code from the R script\nCopy and paste the following example code into your R Script. For now, don’t bother understanding the syntax itself. Just focus on running it.\n\n3 + 3\n2 * 5\n6 / 2\n\"some text\"\n\"some more text\"\nsum(1,2,3,4,5)\n\nYou can run parts of the code in an R script by pressing Ctrl + Enter (on mac this is command + Enter). This can be done in two ways:\n\nIf you select a piece of text (so that it is highlighted) you can press Ctrl + Enter to run the selection. For example, select the first three lines (the three mathematical operations) and press Ctrl + Enter.\nIf you haven’t made a selection, but your text cursor is in the editor, you can press Ctrl + Enter to run the line where the cursor is at. This will also move the cursor to the next line, so you can walk through the code from top to bottom, running each line. Try starting on the first line, and pressing Ctrl + Enter six times, to run each line separately."
  },
  {
    "objectID": "pages/getting-started.html#assigning-values-to-names",
    "href": "pages/getting-started.html#assigning-values-to-names",
    "title": "R basics: Getting started",
    "section": "Assigning values to names",
    "text": "Assigning values to names\nWhen running the example code, you saw that R automatically evaluates expressions. The calculation 3+3 evaluates to 6, and 2*5 evaluates to 10. You also saw that the function sum(1,2,3,4,5) evaluates to 15 (the sum of the numbers). We’ll address how to use R as a calculator and how to perform functions at a later time. For now, one more thing that you need to know about the R syntax is how values can be assigned to names.\nIn plain terms, assignment is how you make R remember things by assigning them to a name. This works the same way for all sorts of values, from single numbers to entire datasets. You can choose whether you prefer the equal sign (=) or the arrow (&lt;-) for assignment.\n\nx = 2\ny &lt;- \"some text\"\n\nHere we have remembered the number 2 as x and the text “some text” as y. If you are working in RStudio (which you should), you can now also see these names and values in the topright window, under the “Environment” tab.\nWe can now use the names to retrieve the values, or to use these values in new commands.\n\nx * 5\n\n[1] 10\n\n\nNote that you shouldn’t type the line ## [1] 10: in this tutorial, lines starting with ## show the output of commands (2 * 5 = 10)."
  },
  {
    "objectID": "pages/getting-started.html#using-rstudio-projects",
    "href": "pages/getting-started.html#using-rstudio-projects",
    "title": "R basics: Getting started",
    "section": "Using RStudio projects",
    "text": "Using RStudio projects\nIt is best to put all your code in an RStudio project. This is essentially a folder on your computer in which you can store the R files and data for a project that you are working on. While you do not necesarily need a project to work with R, they are very convenient, and we strongly recommend using them.\nTo create a new project, go to the top-right corner of your RStudio window. Look for the button labeled Project: (None). Click on this button, and select New Project. Follow the instructions to create a new directory with a new project. Name the project “R introduction”.\nNow, open a new R script and immediately save it (select File -&gt; Save in the toolbar, or press ctrl-s). Name the file my_first_r_script.r. In the bottom-right corner, under the Files tab, you’ll now see the file added to the project. The extension .r indicates that the file is an R script."
  },
  {
    "objectID": "pages/getting-started.html#installing-and-loading-the-quanteda-package",
    "href": "pages/getting-started.html#installing-and-loading-the-quanteda-package",
    "title": "R basics: Getting started",
    "section": "Installing and loading the quanteda package",
    "text": "Installing and loading the quanteda package\nAs mentioned above, one of the nice things about R is its excellent system for sharing packages. In this case, we’re going to use the quanteda package, which is an elaborage package for automatic text analysis, developed by a team of experts.\nMany R packages are on the CRAN network, which allows us to safely and easily download and install a new package from within R. We only need to run a single line of code.\n\ninstall.packages('quanteda')\ninstall.packages('quanteda.textplots')\n\nOnce completed, quanteda has been installed on your computer. You do not need to repeat this command on this computer, unless you want to install quanteda anew (in case there have been updates). Think of this as installing an app on your phone.\nHowever, to use quanteda in an R script, you do need to explicitly tell R that you want to load the package. Think of this as opening an app on your phone. For this you need to following command.\n\nlibrary(quanteda)\n\nPackage version: 4.0.1\nUnicode version: 15.0\nICU version: 72.1\n\n\nParallel computing: disabled\n\n\nSee https://quanteda.io for tutorials and examples.\n\nlibrary(quanteda.textplots)"
  },
  {
    "objectID": "pages/getting-started.html#the-inaugral-speeches-corpus",
    "href": "pages/getting-started.html#the-inaugral-speeches-corpus",
    "title": "R basics: Getting started",
    "section": "The inaugral speeches Corpus",
    "text": "The inaugral speeches Corpus\nIn text analysis, the term corpus is often used to refer to a collection of texts. For this tutorial, we’ll use a demo corpus that is included in the quanteda. The corpus is called data_corpus_inaugural, and contains the inaugural speeches of US presidents. For convenience, we’ll assign the corpus to the name corp\n\ncorp &lt;- data_corpus_inaugural\ncorp\n\nCorpus consisting of 59 documents and 4 docvars.\n1789-Washington :\n\"Fellow-Citizens of the Senate and of the House of Representa...\"\n\n1793-Washington :\n\"Fellow citizens, I am again called upon by the voice of my c...\"\n\n1797-Adams :\n\"When it was first perceived, in early times, that no middle ...\"\n\n1801-Jefferson :\n\"Friends and Fellow Citizens: Called upon to undertake the du...\"\n\n1805-Jefferson :\n\"Proceeding, fellow citizens, to that qualification which the...\"\n\n1809-Madison :\n\"Unwilling to depart from examples of the most revered author...\"\n\n[ reached max_ndoc ... 53 more documents ]\n\n\nHere quanteda lets us know that the corpus contains 58 documents, and 3 docvars. The docvars are variables about the documents, in this case the first and last name of the president, and the year of the speech. We can view them with the docvars() function.\n\ndocvars(corp)  # (only the first lines of output are shown here)\n\n\n\n  Year  President FirstName                 Party\n1 1789 Washington    George                  none\n2 1793 Washington    George                  none\n3 1797      Adams      John            Federalist\n4 1801  Jefferson    Thomas Democratic-Republican\n5 1805  Jefferson    Thomas Democratic-Republican\n6 1809    Madison     James Democratic-Republican\n\n\n(Note: the ‘#’ is used to add a comment to a line, i.e. to explain something for the reader. R will ignore everything after the # symbol. The limit your own output to the first 6 lines, use head(docvars(corp)))"
  },
  {
    "objectID": "pages/getting-started.html#the-document-term-matrix",
    "href": "pages/getting-started.html#the-document-term-matrix",
    "title": "R basics: Getting started",
    "section": "The Document-term Matrix",
    "text": "The Document-term Matrix\nSo where do we go from here? A computer cannot actually understand texts. To analyze texts computationally, we have to convert texts to a representation that allows us to perform calculations. One of the most commonly used representations is the document-term matrix (DTM). This is a matrix in which rows are documents, columns are terms, and cells indicate how often each term occured in each document.\nFor this example, we’ll create a DTM with all terms lowercase, remove english stopwords and punctuation. We will use the dfm function from the quanteda package.\n\ntok &lt;- tokens(corp, remove_punct=TRUE) # remove punctuation\nm &lt;- dfm(tok, tolower = TRUE)          # transform to lowercase letters\nm &lt;- dfm_remove(m, stopwords('en'))    # remove english stopwords\n\nWe now have a DTM with 58 documents and 5,405 terms. The entire DTM is pretty big, so we cannot visualize it entirely. Here we print a subset of only the first 10 documents and first 10 terms.\n\nm[1:10,1:10]\n\nDocument-feature matrix of: 10 documents, 10 features (60.00% sparse) and 4 docvars.\n                 features\ndocs              fellow-citizens senate house representatives among\n  1789-Washington               1      1     2               2     1\n  1793-Washington               0      0     0               0     0\n  1797-Adams                    3      1     0               2     4\n  1801-Jefferson                2      0     0               0     1\n  1805-Jefferson                0      0     0               0     7\n  1809-Madison                  1      0     0               0     0\n                 features\ndocs              vicissitudes incident life event filled\n  1789-Washington            1        1    1     2      1\n  1793-Washington            0        0    0     0      0\n  1797-Adams                 0        0    2     0      0\n  1801-Jefferson             0        0    1     0      0\n  1805-Jefferson             0        0    2     0      0\n  1809-Madison               0        0    1     0      1\n[ reached max_ndoc ... 4 more documents ]\n\n\nFor example, we see here that the word “senate”, which is the stemmed version of the word “senate”, occurs once in the 1789 speech by George Washington, and once in the 1797 speech of John Adams."
  },
  {
    "objectID": "pages/getting-started.html#word-clouds",
    "href": "pages/getting-started.html#word-clouds",
    "title": "R basics: Getting started",
    "section": "Word clouds",
    "text": "Word clouds\nTo get a basic idea of what presidents talk about, we can create a wordcloud with quanteda’s textplot_wordcloud() function. The main input for this function is the DTM that you created in the previous step. As an additional argument we set min_count (the minimum wordcount) to 50 to ignore all words that occured less than 50 times.\n\ntextplot_wordcloud(m, min_count = 50)\n\n\n\n\nOK, that’s decent, but we can do better. One thing we can do is take a /subset/ of the speeches, for example only speeches after 1945 or only speeches by Obama:\n\nm_obama &lt;- dfm_subset(m, President==\"Obama\")\nm_postwar &lt;- dfm_subset(m, Year &gt; 1945)\n\nNote that this has not deleted other years or presidents from our existing DTM m, but created two new DTMs m_obama and m_postwar to contain the subsets. Let’s plot one of these, and let’s also use some colors in addition to wordsize to complement the differences in wordfrequency. You can pass multiple colors to the function to achieve this.\n\ntextplot_wordcloud(m_postwar, \n                   max_words = 100, \n                   color = c('lightblue', 'skyblue2','purple3', 'purple4','darkred'))\n\n\n\n\nAlright, that’ll do for now. Try to play around a bit. If you want to use a better color combination (which shouldn’t be too hard), you can get a list of the available colors, or see this page for an overview of colors.\n\ncolors()     ## output not printed in this document"
  }
]