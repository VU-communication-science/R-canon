---
title: 'Mediation Analyses'
subtitle: 'Conducting simple mediation analyses in R'
---

# Introduction

In this tutorial, we will give a preliminary introduction on how to conduct simple mediation analyses in R. 
We will focus on running multiple regression analyses manually, to explain the concept of mediation and how to test for its significance.
In practice, it is often recommended to use specialized packages for mediation analyses, such as `lavaan` or `mediation`, but to develop a good intuition for the concept, you should first understand the basics.

## What is mediation?

We are often interested in explaining a relationship or causal effect between two variables (e.g., `X` and `Y`). Many theories suggest that `X` does not necessarily *directly* influence `Y`, but that this effect is *mediated* by a third variable, which we can call `M` (for **M**ediation). We can visualize this interplay between the three variables like so:

```{r, echo=F, fig.height=3.4, out.width='100%', message=F, warning=F}
library(grid)
library(ggdag)
library(gridExtra)
library(tidyverse)

coords <- list(
    x = c(X=1, M=2, Y=3),
    y = c(X=1, M=2, Y=1)
)

mediated <- dagify(Y ~ X + M, M ~ X, Y ~ M, coords = coords) |> 
    tidy_dagitty() |> 
    mutate(edge = case_when(
        name == "X" & to == "M" ~ "indirect a",
        name == "M" & to == "Y" ~ "indirect b",
        name == "X" & to == "Y" ~ "direct effect",
        TRUE ~ NA_character_
    )) |>
    mutate(vjust = if_else(name == 'X' & to == 'Y', 2, 0.5)) |>
    ggdag() + theme_dag() +
    geom_dag_edges_fan(aes(label=edge,vjust=vjust), angle_calc="along", arrow=NULL, edge_width=0)

total <- dagify(Y ~ X, coords = coords) |> 
    tidy_dagitty() |> 
    mutate(edge = case_when(
        name == "X" & to == "Y" ~ "total effect",
        TRUE ~ NA_character_
    )) |>
    mutate(vjust = 2) |>
    ggdag() + theme_dag() +
    geom_dag_edges_fan(aes(label=edge,vjust=vjust), angle_calc="along", arrow=NULL, edge_width=0)

grid.arrange(total,mediated,  ncol=2)
```

In the left figure we see the **total effect** of `X` on `Y`. 
Here we only have one **path** from `X` to `Y`.

In the right figure, we see a mediation model, where the effect of `X` on `Y` is mediated by `M`. 
This gives us two different **paths** for how X to have an effect on Y:

* **direct effect**. The direct path `X -> Y`.
* **indirect effect**. The indirect path `X -> M` and `M -> Y`.
We can calculate the indirect effect by multiplying both arrows (**a * b**)

The mediated model can help us distinguish between different scenarios:

* **Full mediation**: Only the indirect effect of `X` on `Y` through `M` is significant.
* **No mediation**: Only the direct effect of `X` on `Y` is significant.
* **Partial mediation**: Both the direct and indirect effects of `X` on `Y` are significant.
* **No effect**: Neither the direct nor the indirect effect of `X` on `Y` is significant.
  
**Note of caution:** Theoretically, mediation models almost always suggest some sort of "causal chain". Yet, the analysis itself cannot prove causality. The same caution applies as discussed in the [causality](../concepts/causality.qmd) section.

## Packages and simulated data

```{r, message=F}
library(tidyverse)
library(sjPlot)
```

For this tutorial we are going to simulate some data that align with the Figure presented above. 
You don't need to understand this process, and can just run the code to create the data.
But if you are interested, here is what we are doing:

* Set a seed to make our simulation reproducible. This ensures that even though we are creating random data, the outcome is the same every time we run the code.
* Create a variable `X` that is normally distributed (mean = 3, sd = 1).
* Create a variable `M` that is influenced by `X` ($b = 2$), with random noise.[^inversed_regression]
* Create a variable `Y` that is influenced by `M` ($b = 0.3$), and `X` ($b = 0.8$), with random noise. 
* This gives us a data set in which `X` influences `Y` both directly and indirectly through `M`.

[^inversed_regression]: Note that what we're doing here is simulating data using the regression equation. With `2*X` we say that for every unit increase in X, M should go up by 2. With `rnorm(n, 0, 2)` we add a residual (mean = 0, sd = 2) to the equation.
We could also have added an intercept, but we left it out for simplicity.


```{r}
set.seed(42)
n <- 500
X <- rnorm(n, 3, 1)
M <- 0.5*X + rnorm(n, 0, 2)
Y <- 0.3*M + 0.8*X + rnorm(n, 0, 3)

d <- tibble(X,M,Y)
```


# Simple regression analyses

Let's first look at the model without the mediator `M`. 

```{r}
#| html-table-processing: none
m_total <- lm(Y ~ X, d)
tab_model(m_total)
```


This gives us the total effect of `X` on `Y`.

```{r, fig.height=1.3, echo=F, out.width='100%', message=F, warning=F}
get_coef <- function(m, var) {
    coef = summary(m)$coef[var,1]
    p = summary(m)$coef[var,4]
    stars = ""
    if (p < 0.05) stars = "*"
    if (p < 0.01) stars = "**"
    if (p < 0.001) stars = "***"
    return (sprintf("%.3f%s", coef, stars))
}

dagify(Y ~ X, coords = coords) |> 
    tidy_dagitty() |> 
    mutate(edge = case_when(
        name == "X" & to == "Y" ~ get_coef(m_total, 2),
        TRUE ~ NA_character_
    )) |>
    mutate(vjust = 2) |>
    ggdag() + theme_dag() +
    geom_dag_edges_fan(aes(label=edge,vjust=vjust), angle_calc="along", arrow=NULL, edge_width=0)
```

Now let's look at the model with the mediator `M`.
We can break this model down into two separate regression models:

* Model 1: `M` predicted by `X`.
* Model 2: `Y` predicted by `X` and `M`.

```{r}
m1 <- lm(M ~ X, d)
m2 <- lm(Y ~ X + M, d)

tab_model(m1, m2)
```

Let's visualize the paths in the mediation model:

```{r, fig.height=3.4, echo=F, out.width='100%', message=F, warning=F}
dagify(Y ~ X + M, M ~ X, Y ~ M, coords = coords) |> 
    tidy_dagitty() |> 
    mutate(edge = case_when(
        name == "X" & to == "M" ~ get_coef(m1, 2),
        name == "M" & to == "Y" ~ get_coef(m2, 3),
        name == "X" & to == "Y" ~ get_coef(m2, 2),
        TRUE ~ NA_character_
    )) |>
    mutate(vjust = if_else(name == 'X' & to == 'Y', 2, 0.5)) |>
    ggdag() + theme_dag() +
    geom_dag_edges_fan(aes(label=edge,vjust=vjust), angle_calc="along", arrow=NULL, edge_width=0)
```

We can see that all paths are significant, suggesting that there is both a direct and indirect effect of `X` on `Y`. 
In other words, this is a **partial mediation**.

We can calculate the indirect effect by multiplying the coefficients of the two paths: 

```{r, echo=F, results=F}
a <- summary(m1)$coef[2,1] |> round(3)
b <- summary(m2)$coef[3,1] |> round(3)
```
$$a \times b = `r a` \times `r b` = `r round(a*b,3)`$$


::: {.callout-warning title="Testing the significance of the indirect effect" collapse="true"}

If both parts of the indirect effect (**a * b**) are significant, there is a good chance that the indirect effect is significant.
And similarly, if one part is not significant, the indirect effect is likely not significant.
However, this is not always the case, so it is better to explicitly test the significance of the indirect effect.

This is not straightforward, and requires more advanced techniques, such as bootstrapping or Monte-Carlo simulations.
We will not cover these techniques in this tutorial, because it distracts from the goal of teaching the basic concept of mediation.
Just be aware that this is a limitation of the simple mediation analyses we have shown here, and that it is therefore better to use advanced techniques or specialized packages for mediation analyses in actual research.
:::

::: {.callout-tip title="Full mediation example" collapse="true"}
## Full mediation

Since we're working with simulated data, we can make a small adjustment to our code to simulate a scenario where `M` fully mediates the effect of `X` on `Y`.
Notice that our simulation is almost identical, except that we set the coefficient of `X` on `Y` to 0.

```{r out.width='100%'}
set.seed(42)
n <- 500
X <- rnorm(n, 3, 1)
M <- 2*X + rnorm(n, 0, 2)
Y <- 0.3*M + 0*X + rnorm(n, 0, 3)
d_full <- tibble(X,M,Y)

```


To nicely interpret the models side-by-side, we'll add some labels and drop the confidence intervals.

```{r}
m_total <- lm(Y ~ X, d_full)
m1 <- lm(M ~ X, d_full)
m2 <- lm(Y ~ X + M, d_full)
tab_model(m_total, m1, m2,  
          dv.labels=c("Y ~ X", "M ~ X", "Y ~ X + M"), show.ci = FALSE)
```

```{r, fig.height=3.4, echo=F, out.width='100%', message=F, warning=F}

total <- dagify(Y ~ X, coords = coords) |> 
    tidy_dagitty() |> 
    mutate(edge = case_when(
        name == "X" & to == "Y" ~ get_coef(m_total, 2),
        TRUE ~ NA_character_
    )) |>
    mutate(vjust = 2) |>
    ggdag() + theme_dag() +
    geom_dag_edges_fan(aes(label=edge,vjust=vjust), angle_calc="along", arrow=NULL, edge_width=0)
mediated <- dagify(Y ~ X + M, M ~ X, Y ~ M, coords = coords) |> 
    tidy_dagitty() |> 
    mutate(edge = case_when(
        name == "X" & to == "M" ~ get_coef(m1, 2),
        name == "M" & to == "Y" ~ get_coef(m2, 3),
        name == "X" & to == "Y" ~ get_coef(m2, 2),
        TRUE ~ NA_character_
    )) |>
    mutate(vjust = if_else(name == 'X' & to == 'Y', 2, 0.5)) |>
    ggdag() + theme_dag() +
    geom_dag_edges_fan(aes(label=edge,vjust=vjust), angle_calc="along", arrow=NULL, edge_width=0)

grid.arrange(total,mediated,  ncol=2)
```

Here we do have an effect of `X` on `Y`, but when we control for `M`, the effect of `X` on `Y` is no longer significant.
Since both the effect of `X` on `M` and `M` on `Y` are significant, this is a case of **full mediation**.
:::

::: {.callout-tip title="No mediation example" collapse="true"}
## No mediation

We can also simulate a scenario where `M` has no effect on `Y`.
We do not make the effect of `M` on `Y` zero, but we set the coefficient to a very small value, so that it is not significant.

```{r}
set.seed(42)
n <- 500
X <- rnorm(n, 3, 1)
M <- 0.5*X + rnorm(n, 0, 2)
Y <- 0.05*M + 0.8*X + rnorm(n, 0, 3)
d_no_mediation <- tibble(X,M,Y)

m_total <- lm(Y ~ X, d_no_mediation)
m1 <- lm(M ~ X, d_no_mediation)
m2 <- lm(Y ~ X + M, d_no_mediation)
tab_model(m_total, m1, m2,  
          dv.labels=c("Y ~ X", "M ~ X", "Y ~ X + M"), show.ci = FALSE)
```

```{r, fig.height=3.4, echo=F, out.width='100%', message=F, warning=F}
total <- dagify(Y ~ X, coords = coords) |> 
    tidy_dagitty() |> 
    mutate(edge = case_when(
        name == "X" & to == "Y" ~ get_coef(m_total, 2),
        TRUE ~ NA_character_
    )) |>
    mutate(vjust = 2) |>
    ggdag() + theme_dag() +
    geom_dag_edges_fan(aes(label=edge,vjust=vjust), angle_calc="along", arrow=NULL, edge_width=0)
mediated <- dagify(Y ~ X + M, M ~ X, Y ~ M, coords = coords) |> 
    tidy_dagitty() |> 
    mutate(edge = case_when(
        name == "X" & to == "M" ~ get_coef(m1, 2),
        name == "M" & to == "Y" ~ get_coef(m2, 3),
        name == "X" & to == "Y" ~ get_coef(m2, 2),
        TRUE ~ NA_character_
    )) |>
    mutate(vjust = if_else(name == 'X' & to == 'Y', 2, 0.5)) |>
    ggdag() + theme_dag() +
    geom_dag_edges_fan(aes(label=edge,vjust=vjust), angle_calc="along", arrow=NULL, edge_width=0)

grid.arrange(total,mediated,  ncol=2)
```

In this case, the effect of `X` on `Y` is significant, but the effect of `X` on `M` is not. So there is no mediation effect.
The full effect of `X` on `Y` is direct.
:::

# Testing mediation using PROCESS

The `PROCESS` macro for SPSS and SAS is a popular tool for mediation analyses.
It is also available in R, using the `bruceR` package.
Here we show you how to use PROCESS, using the same simulated data (`d`) as before.
If you compare the results with our own manual analysis, you'll see that the direct, total and indirect (a*b) effects are the same.
But one important difference is that PROCESS also provides an explicit confidence interval for the indirect effect, based on bootstrapping.

To use `PROCESS`, you simply provide the data frame, and specify the column names for the dependent variable (`y = "Y"`), the independent variable (`x = "X"`), and the mediator (`meds = "M"`).

```{r, message=F}
library(bruceR)

set.seed(42)
n <- 500
X <- rnorm(n, 3, 1)
M <- 0.5*X + rnorm(n, 0, 2)
Y <- 0.3*M + 0.8*X + rnorm(n, 0, 3)
d <- tibble(X,M,Y)

PROCESS(d, y="Y", x="X", meds="M")
```
